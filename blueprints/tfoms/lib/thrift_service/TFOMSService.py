#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def getAvailableAccounts(self, ):
    pass

  def getAccountItems(self, accountId):
    """
    Parameters:
     - accountId
    """
    pass

  def deleteAccount(self, accountId):
    """
    Parameters:
     - accountId
    """
    pass

  def getXMLRegisters(self, contractId, beginDate, endDate, infisCode, orgStructureIdList, patientOptionalFields, sluchOptionalFields):
    """
    Parameters:
     - contractId
     - beginDate
     - endDate
     - infisCode
     - orgStructureIdList
     - patientOptionalFields
     - sluchOptionalFields
    """
    pass

  def getOrgStructures(self, organisationInfis):
    """
    Parameters:
     - organisationInfis
    """
    pass

  def changeClientPolicy(self, patientId, newPolicy):
    """
    Parameters:
     - patientId
     - newPolicy
    """
    pass

  def getDBFStationary(self, beginDate, endDate, infisCode):
    """
    Parameters:
     - beginDate
     - endDate
     - infisCode
    """
    pass

  def getDBFPoliclinic(self, beginDate, endDate, infisCode):
    """
    Parameters:
     - beginDate
     - endDate
     - infisCode
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getAvailableAccounts(self, ):
    self.send_getAvailableAccounts()
    return self.recv_getAvailableAccounts()

  def send_getAvailableAccounts(self, ):
    self._oprot.writeMessageBegin('getAvailableAccounts', TMessageType.CALL, self._seqid)
    args = getAvailableAccounts_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAvailableAccounts(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAvailableAccounts_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAvailableAccounts failed: unknown result");

  def getAccountItems(self, accountId):
    """
    Parameters:
     - accountId
    """
    self.send_getAccountItems(accountId)
    return self.recv_getAccountItems()

  def send_getAccountItems(self, accountId):
    self._oprot.writeMessageBegin('getAccountItems', TMessageType.CALL, self._seqid)
    args = getAccountItems_args()
    args.accountId = accountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAccountItems(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAccountItems_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.nfExc is not None:
      raise result.nfExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccountItems failed: unknown result");

  def deleteAccount(self, accountId):
    """
    Parameters:
     - accountId
    """
    self.send_deleteAccount(accountId)
    return self.recv_deleteAccount()

  def send_deleteAccount(self, accountId):
    self._oprot.writeMessageBegin('deleteAccount', TMessageType.CALL, self._seqid)
    args = deleteAccount_args()
    args.accountId = accountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteAccount(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteAccount failed: unknown result");

  def getXMLRegisters(self, contractId, beginDate, endDate, infisCode, orgStructureIdList, patientOptionalFields, sluchOptionalFields):
    """
    Parameters:
     - contractId
     - beginDate
     - endDate
     - infisCode
     - orgStructureIdList
     - patientOptionalFields
     - sluchOptionalFields
    """
    self.send_getXMLRegisters(contractId, beginDate, endDate, infisCode, orgStructureIdList, patientOptionalFields, sluchOptionalFields)
    return self.recv_getXMLRegisters()

  def send_getXMLRegisters(self, contractId, beginDate, endDate, infisCode, orgStructureIdList, patientOptionalFields, sluchOptionalFields):
    self._oprot.writeMessageBegin('getXMLRegisters', TMessageType.CALL, self._seqid)
    args = getXMLRegisters_args()
    args.contractId = contractId
    args.beginDate = beginDate
    args.endDate = endDate
    args.infisCode = infisCode
    args.orgStructureIdList = orgStructureIdList
    args.patientOptionalFields = patientOptionalFields
    args.sluchOptionalFields = sluchOptionalFields
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXMLRegisters(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXMLRegisters_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.infisExc is not None:
      raise result.infisExc
    if result.contractExc is not None:
      raise result.contractExc
    if result.datesExc is not None:
      raise result.datesExc
    if result.nfExc is not None:
      raise result.nfExc
    if result.sqlExc is not None:
      raise result.sqlExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXMLRegisters failed: unknown result");

  def getOrgStructures(self, organisationInfis):
    """
    Parameters:
     - organisationInfis
    """
    self.send_getOrgStructures(organisationInfis)
    return self.recv_getOrgStructures()

  def send_getOrgStructures(self, organisationInfis):
    self._oprot.writeMessageBegin('getOrgStructures', TMessageType.CALL, self._seqid)
    args = getOrgStructures_args()
    args.organisationInfis = organisationInfis
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getOrgStructures(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getOrgStructures_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.infisExc is not None:
      raise result.infisExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getOrgStructures failed: unknown result");

  def changeClientPolicy(self, patientId, newPolicy):
    """
    Parameters:
     - patientId
     - newPolicy
    """
    self.send_changeClientPolicy(patientId, newPolicy)
    return self.recv_changeClientPolicy()

  def send_changeClientPolicy(self, patientId, newPolicy):
    self._oprot.writeMessageBegin('changeClientPolicy', TMessageType.CALL, self._seqid)
    args = changeClientPolicy_args()
    args.patientId = patientId
    args.newPolicy = newPolicy
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeClientPolicy(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeClientPolicy_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.argExc is not None:
      raise result.argExc
    if result.sqlExc is not None:
      raise result.sqlExc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeClientPolicy failed: unknown result");

  def getDBFStationary(self, beginDate, endDate, infisCode):
    """
    Parameters:
     - beginDate
     - endDate
     - infisCode
    """
    self.send_getDBFStationary(beginDate, endDate, infisCode)
    return self.recv_getDBFStationary()

  def send_getDBFStationary(self, beginDate, endDate, infisCode):
    self._oprot.writeMessageBegin('getDBFStationary', TMessageType.CALL, self._seqid)
    args = getDBFStationary_args()
    args.beginDate = beginDate
    args.endDate = endDate
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDBFStationary(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDBFStationary_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.argExc is not None:
      raise result.argExc
    if result.sqlExc is not None:
      raise result.sqlExc
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDBFStationary failed: unknown result");

  def getDBFPoliclinic(self, beginDate, endDate, infisCode):
    """
    Parameters:
     - beginDate
     - endDate
     - infisCode
    """
    self.send_getDBFPoliclinic(beginDate, endDate, infisCode)
    return self.recv_getDBFPoliclinic()

  def send_getDBFPoliclinic(self, beginDate, endDate, infisCode):
    self._oprot.writeMessageBegin('getDBFPoliclinic', TMessageType.CALL, self._seqid)
    args = getDBFPoliclinic_args()
    args.beginDate = beginDate
    args.endDate = endDate
    args.infisCode = infisCode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDBFPoliclinic(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDBFPoliclinic_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.argExc is not None:
      raise result.argExc
    if result.sqlExc is not None:
      raise result.sqlExc
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDBFPoliclinic failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getAvailableAccounts"] = Processor.process_getAvailableAccounts
    self._processMap["getAccountItems"] = Processor.process_getAccountItems
    self._processMap["deleteAccount"] = Processor.process_deleteAccount
    self._processMap["getXMLRegisters"] = Processor.process_getXMLRegisters
    self._processMap["getOrgStructures"] = Processor.process_getOrgStructures
    self._processMap["changeClientPolicy"] = Processor.process_changeClientPolicy
    self._processMap["getDBFStationary"] = Processor.process_getDBFStationary
    self._processMap["getDBFPoliclinic"] = Processor.process_getDBFPoliclinic

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getAvailableAccounts(self, seqid, iprot, oprot):
    args = getAvailableAccounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAvailableAccounts_result()
    result.success = self._handler.getAvailableAccounts()
    oprot.writeMessageBegin("getAvailableAccounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAccountItems(self, seqid, iprot, oprot):
    args = getAccountItems_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAccountItems_result()
    try:
      result.success = self._handler.getAccountItems(args.accountId)
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    oprot.writeMessageBegin("getAccountItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteAccount(self, seqid, iprot, oprot):
    args = deleteAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteAccount_result()
    result.success = self._handler.deleteAccount(args.accountId)
    oprot.writeMessageBegin("deleteAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXMLRegisters(self, seqid, iprot, oprot):
    args = getXMLRegisters_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXMLRegisters_result()
    try:
      result.success = self._handler.getXMLRegisters(args.contractId, args.beginDate, args.endDate, args.infisCode, args.orgStructureIdList, args.patientOptionalFields, args.sluchOptionalFields)
    except InvalidOrganizationInfisException as infisExc:
      result.infisExc = infisExc
    except InvalidContractException as contractExc:
      result.contractExc = contractExc
    except InvalidDateIntervalException as datesExc:
      result.datesExc = datesExc
    except NotFoundException as nfExc:
      result.nfExc = nfExc
    except SQLException as sqlExc:
      result.sqlExc = sqlExc
    oprot.writeMessageBegin("getXMLRegisters", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getOrgStructures(self, seqid, iprot, oprot):
    args = getOrgStructures_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getOrgStructures_result()
    try:
      result.success = self._handler.getOrgStructures(args.organisationInfis)
    except InvalidOrganizationInfisException as infisExc:
      result.infisExc = infisExc
    oprot.writeMessageBegin("getOrgStructures", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeClientPolicy(self, seqid, iprot, oprot):
    args = changeClientPolicy_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeClientPolicy_result()
    try:
      result.success = self._handler.changeClientPolicy(args.patientId, args.newPolicy)
    except InvalidArgumentException as argExc:
      result.argExc = argExc
    except SQLException as sqlExc:
      result.sqlExc = sqlExc
    oprot.writeMessageBegin("changeClientPolicy", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDBFStationary(self, seqid, iprot, oprot):
    args = getDBFStationary_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDBFStationary_result()
    try:
      result.success = self._handler.getDBFStationary(args.beginDate, args.endDate, args.infisCode)
    except InvalidArgumentException as argExc:
      result.argExc = argExc
    except SQLException as sqlExc:
      result.sqlExc = sqlExc
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getDBFStationary", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDBFPoliclinic(self, seqid, iprot, oprot):
    args = getDBFPoliclinic_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDBFPoliclinic_result()
    try:
      result.success = self._handler.getDBFPoliclinic(args.beginDate, args.endDate, args.infisCode)
    except InvalidArgumentException as argExc:
      result.argExc = argExc
    except SQLException as sqlExc:
      result.sqlExc = sqlExc
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getDBFPoliclinic", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getAvailableAccounts_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAvailableAccounts_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAvailableAccounts_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Account, Account.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = Account()
            _elem35.read(iprot)
            self.success.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAvailableAccounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter36 in self.success:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAccountItems_args(object):
  """
  Attributes:
   - accountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'accountId', None, None, ), # 1
  )

  def __init__(self, accountId=None,):
    self.accountId = accountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.accountId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAccountItems_args')
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I32, 1)
      oprot.writeI32(self.accountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAccountItems_result(object):
  """
  Attributes:
   - success
   - nfExc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(AccountItem, AccountItem.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, nfExc=None,):
    self.success = success
    self.nfExc = nfExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = AccountItem()
            _elem42.read(iprot)
            self.success.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAccountItems_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter43 in self.success:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 1)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteAccount_args(object):
  """
  Attributes:
   - accountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'accountId', None, None, ), # 1
  )

  def __init__(self, accountId=None,):
    self.accountId = accountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.accountId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteAccount_args')
    if self.accountId is not None:
      oprot.writeFieldBegin('accountId', TType.I32, 1)
      oprot.writeI32(self.accountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteAccount_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXMLRegisters_args(object):
  """
  Attributes:
   - contractId
   - beginDate
   - endDate
   - infisCode
   - orgStructureIdList
   - patientOptionalFields
   - sluchOptionalFields
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'contractId', None, None, ), # 1
    (2, TType.I64, 'beginDate', None, None, ), # 2
    (3, TType.I64, 'endDate', None, None, ), # 3
    (4, TType.STRING, 'infisCode', None, None, ), # 4
    (5, TType.LIST, 'orgStructureIdList', (TType.I32,None), None, ), # 5
    (6, TType.SET, 'patientOptionalFields', (TType.I32,None), None, ), # 6
    (7, TType.SET, 'sluchOptionalFields', (TType.I32,None), None, ), # 7
  )

  def __init__(self, contractId=None, beginDate=None, endDate=None, infisCode=None, orgStructureIdList=None, patientOptionalFields=None, sluchOptionalFields=None,):
    self.contractId = contractId
    self.beginDate = beginDate
    self.endDate = endDate
    self.infisCode = infisCode
    self.orgStructureIdList = orgStructureIdList
    self.patientOptionalFields = patientOptionalFields
    self.sluchOptionalFields = sluchOptionalFields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.contractId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.beginDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.orgStructureIdList = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = iprot.readI32();
            self.orgStructureIdList.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.patientOptionalFields = set()
          (_etype53, _size50) = iprot.readSetBegin()
          for _i54 in xrange(_size50):
            _elem55 = iprot.readI32();
            self.patientOptionalFields.add(_elem55)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.sluchOptionalFields = set()
          (_etype59, _size56) = iprot.readSetBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI32();
            self.sluchOptionalFields.add(_elem61)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXMLRegisters_args')
    if self.contractId is not None:
      oprot.writeFieldBegin('contractId', TType.I32, 1)
      oprot.writeI32(self.contractId)
      oprot.writeFieldEnd()
    if self.beginDate is not None:
      oprot.writeFieldBegin('beginDate', TType.I64, 2)
      oprot.writeI64(self.beginDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 3)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 4)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.orgStructureIdList is not None:
      oprot.writeFieldBegin('orgStructureIdList', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.orgStructureIdList))
      for iter62 in self.orgStructureIdList:
        oprot.writeI32(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.patientOptionalFields is not None:
      oprot.writeFieldBegin('patientOptionalFields', TType.SET, 6)
      oprot.writeSetBegin(TType.I32, len(self.patientOptionalFields))
      for iter63 in self.patientOptionalFields:
        oprot.writeI32(iter63)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.sluchOptionalFields is not None:
      oprot.writeFieldBegin('sluchOptionalFields', TType.SET, 7)
      oprot.writeSetBegin(TType.I32, len(self.sluchOptionalFields))
      for iter64 in self.sluchOptionalFields:
        oprot.writeI32(iter64)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXMLRegisters_result(object):
  """
  Attributes:
   - success
   - infisExc
   - contractExc
   - datesExc
   - nfExc
   - sqlExc
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XMLRegisters, XMLRegisters.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'infisExc', (InvalidOrganizationInfisException, InvalidOrganizationInfisException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'contractExc', (InvalidContractException, InvalidContractException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'datesExc', (InvalidDateIntervalException, InvalidDateIntervalException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'nfExc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'sqlExc', (SQLException, SQLException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, infisExc=None, contractExc=None, datesExc=None, nfExc=None, sqlExc=None,):
    self.success = success
    self.infisExc = infisExc
    self.contractExc = contractExc
    self.datesExc = datesExc
    self.nfExc = nfExc
    self.sqlExc = sqlExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XMLRegisters()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.infisExc = InvalidOrganizationInfisException()
          self.infisExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractExc = InvalidContractException()
          self.contractExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.datesExc = InvalidDateIntervalException()
          self.datesExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.nfExc = NotFoundException()
          self.nfExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.sqlExc = SQLException()
          self.sqlExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXMLRegisters_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.infisExc is not None:
      oprot.writeFieldBegin('infisExc', TType.STRUCT, 1)
      self.infisExc.write(oprot)
      oprot.writeFieldEnd()
    if self.contractExc is not None:
      oprot.writeFieldBegin('contractExc', TType.STRUCT, 2)
      self.contractExc.write(oprot)
      oprot.writeFieldEnd()
    if self.datesExc is not None:
      oprot.writeFieldBegin('datesExc', TType.STRUCT, 3)
      self.datesExc.write(oprot)
      oprot.writeFieldEnd()
    if self.nfExc is not None:
      oprot.writeFieldBegin('nfExc', TType.STRUCT, 4)
      self.nfExc.write(oprot)
      oprot.writeFieldEnd()
    if self.sqlExc is not None:
      oprot.writeFieldBegin('sqlExc', TType.STRUCT, 5)
      self.sqlExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getOrgStructures_args(object):
  """
  Attributes:
   - organisationInfis
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'organisationInfis', None, None, ), # 1
  )

  def __init__(self, organisationInfis=None,):
    self.organisationInfis = organisationInfis

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.organisationInfis = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrgStructures_args')
    if self.organisationInfis is not None:
      oprot.writeFieldBegin('organisationInfis', TType.STRING, 1)
      oprot.writeString(self.organisationInfis.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getOrgStructures_result(object):
  """
  Attributes:
   - success
   - infisExc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(OrgStructure, OrgStructure.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'infisExc', (InvalidOrganizationInfisException, InvalidOrganizationInfisException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, infisExc=None,):
    self.success = success
    self.infisExc = infisExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = OrgStructure()
            _elem70.read(iprot)
            self.success.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.infisExc = InvalidOrganizationInfisException()
          self.infisExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getOrgStructures_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter71 in self.success:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.infisExc is not None:
      oprot.writeFieldBegin('infisExc', TType.STRUCT, 1)
      self.infisExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeClientPolicy_args(object):
  """
  Attributes:
   - patientId
   - newPolicy
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
    (2, TType.STRUCT, 'newPolicy', (TClientPolicy, TClientPolicy.thrift_spec), None, ), # 2
  )

  def __init__(self, patientId=None, newPolicy=None,):
    self.patientId = patientId
    self.newPolicy = newPolicy

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.newPolicy = TClientPolicy()
          self.newPolicy.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeClientPolicy_args')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.newPolicy is not None:
      oprot.writeFieldBegin('newPolicy', TType.STRUCT, 2)
      self.newPolicy.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeClientPolicy_result(object):
  """
  Attributes:
   - success
   - argExc
   - sqlExc
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'argExc', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'sqlExc', (SQLException, SQLException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, argExc=None, sqlExc=None,):
    self.success = success
    self.argExc = argExc
    self.sqlExc = sqlExc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.argExc = InvalidArgumentException()
          self.argExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sqlExc = SQLException()
          self.sqlExc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeClientPolicy_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.argExc is not None:
      oprot.writeFieldBegin('argExc', TType.STRUCT, 1)
      self.argExc.write(oprot)
      oprot.writeFieldEnd()
    if self.sqlExc is not None:
      oprot.writeFieldBegin('sqlExc', TType.STRUCT, 2)
      self.sqlExc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDBFStationary_args(object):
  """
  Attributes:
   - beginDate
   - endDate
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'beginDate', None, None, ), # 1
    (2, TType.I64, 'endDate', None, None, ), # 2
    (3, TType.STRING, 'infisCode', None, None, ), # 3
  )

  def __init__(self, beginDate=None, endDate=None, infisCode=None,):
    self.beginDate = beginDate
    self.endDate = endDate
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.beginDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDBFStationary_args')
    if self.beginDate is not None:
      oprot.writeFieldBegin('beginDate', TType.I64, 1)
      oprot.writeI64(self.beginDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 2)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 3)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDBFStationary_result(object):
  """
  Attributes:
   - success
   - argExc
   - sqlExc
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(DBFStationary, DBFStationary.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'argExc', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'sqlExc', (SQLException, SQLException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, argExc=None, sqlExc=None, exc=None,):
    self.success = success
    self.argExc = argExc
    self.sqlExc = sqlExc
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = DBFStationary()
            _elem77.read(iprot)
            self.success.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.argExc = InvalidArgumentException()
          self.argExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sqlExc = SQLException()
          self.sqlExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDBFStationary_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter78 in self.success:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.argExc is not None:
      oprot.writeFieldBegin('argExc', TType.STRUCT, 1)
      self.argExc.write(oprot)
      oprot.writeFieldEnd()
    if self.sqlExc is not None:
      oprot.writeFieldBegin('sqlExc', TType.STRUCT, 2)
      self.sqlExc.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 3)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDBFPoliclinic_args(object):
  """
  Attributes:
   - beginDate
   - endDate
   - infisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'beginDate', None, None, ), # 1
    (2, TType.I64, 'endDate', None, None, ), # 2
    (3, TType.STRING, 'infisCode', None, None, ), # 3
  )

  def __init__(self, beginDate=None, endDate=None, infisCode=None,):
    self.beginDate = beginDate
    self.endDate = endDate
    self.infisCode = infisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.beginDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.infisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDBFPoliclinic_args')
    if self.beginDate is not None:
      oprot.writeFieldBegin('beginDate', TType.I64, 1)
      oprot.writeI64(self.beginDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 2)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.infisCode is not None:
      oprot.writeFieldBegin('infisCode', TType.STRING, 3)
      oprot.writeString(self.infisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDBFPoliclinic_result(object):
  """
  Attributes:
   - success
   - argExc
   - sqlExc
   - exc
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(DBFPoliclinic, DBFPoliclinic.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'argExc', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'sqlExc', (SQLException, SQLException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, argExc=None, sqlExc=None, exc=None,):
    self.success = success
    self.argExc = argExc
    self.sqlExc = sqlExc
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = DBFPoliclinic()
            _elem84.read(iprot)
            self.success.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.argExc = InvalidArgumentException()
          self.argExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sqlExc = SQLException()
          self.sqlExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDBFPoliclinic_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter85 in self.success:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.argExc is not None:
      oprot.writeFieldBegin('argExc', TType.STRUCT, 1)
      self.argExc.write(oprot)
      oprot.writeFieldEnd()
    if self.sqlExc is not None:
      oprot.writeFieldBegin('sqlExc', TType.STRUCT, 2)
      self.sqlExc.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 3)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
