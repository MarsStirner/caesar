#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PatientOptionalFields:
  SNILS = 0
  MR = 1
  OKATOG = 2
  OKATOP = 3
  DOCTYPE = 4
  DOCSER = 5
  DOCNUM = 6
  SPOLIS = 7
  SMO_OGRN = 8
  SMO_NAM = 9
  SMO_OK = 10
  FAM_P = 11
  IM_P = 12
  OT_P = 13
  DR_P = 14
  W_P = 15

  _VALUES_TO_NAMES = {
    0: "SNILS",
    1: "MR",
    2: "OKATOG",
    3: "OKATOP",
    4: "DOCTYPE",
    5: "DOCSER",
    6: "DOCNUM",
    7: "SPOLIS",
    8: "SMO_OGRN",
    9: "SMO_NAM",
    10: "SMO_OK",
    11: "FAM_P",
    12: "IM_P",
    13: "OT_P",
    14: "DR_P",
    15: "W_P",
  }

  _NAMES_TO_VALUES = {
    "SNILS": 0,
    "MR": 1,
    "OKATOG": 2,
    "OKATOP": 3,
    "DOCTYPE": 4,
    "DOCSER": 5,
    "DOCNUM": 6,
    "SPOLIS": 7,
    "SMO_OGRN": 8,
    "SMO_NAM": 9,
    "SMO_OK": 10,
    "FAM_P": 11,
    "IM_P": 12,
    "OT_P": 13,
    "DR_P": 14,
    "W_P": 15,
  }

class SluchOptionalFields:
  NPR_MO = 0
  EXTR = 1
  LPU_1 = 2
  PODR = 3
  DET = 4
  DS0 = 5
  DS2 = 6
  CODE_MES1 = 7
  CODE_MES2 = 8
  OPLATA = 9

  _VALUES_TO_NAMES = {
    0: "NPR_MO",
    1: "EXTR",
    2: "LPU_1",
    3: "PODR",
    4: "DET",
    5: "DS0",
    6: "DS2",
    7: "CODE_MES1",
    8: "CODE_MES2",
    9: "OPLATA",
  }

  _NAMES_TO_VALUES = {
    "NPR_MO": 0,
    "EXTR": 1,
    "LPU_1": 2,
    "PODR": 3,
    "DET": 4,
    "DS0": 5,
    "DS2": 6,
    "CODE_MES1": 7,
    "CODE_MES2": 8,
    "OPLATA": 9,
  }


class Spokesman:
  """
  Attributes:
   - patientId
   - FAM_P
   - IM_P
   - OT_P
   - DR_P
   - W_P
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
    (2, TType.STRING, 'FAM_P', None, None, ), # 2
    (3, TType.STRING, 'IM_P', None, None, ), # 3
    (4, TType.STRING, 'OT_P', None, None, ), # 4
    (5, TType.I64, 'DR_P', None, None, ), # 5
    (6, TType.I16, 'W_P', None, None, ), # 6
  )

  def __init__(self, patientId=None, FAM_P=None, IM_P=None, OT_P=None, DR_P=None, W_P=None,):
    self.patientId = patientId
    self.FAM_P = FAM_P
    self.IM_P = IM_P
    self.OT_P = OT_P
    self.DR_P = DR_P
    self.W_P = W_P

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.FAM_P = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.IM_P = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.OT_P = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.DR_P = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.W_P = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Spokesman')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.FAM_P is not None:
      oprot.writeFieldBegin('FAM_P', TType.STRING, 2)
      oprot.writeString(self.FAM_P)
      oprot.writeFieldEnd()
    if self.IM_P is not None:
      oprot.writeFieldBegin('IM_P', TType.STRING, 3)
      oprot.writeString(self.IM_P)
      oprot.writeFieldEnd()
    if self.OT_P is not None:
      oprot.writeFieldBegin('OT_P', TType.STRING, 4)
      oprot.writeString(self.OT_P)
      oprot.writeFieldEnd()
    if self.DR_P is not None:
      oprot.writeFieldBegin('DR_P', TType.I64, 5)
      oprot.writeI64(self.DR_P)
      oprot.writeFieldEnd()
    if self.W_P is not None:
      oprot.writeFieldBegin('W_P', TType.I16, 6)
      oprot.writeI16(self.W_P)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Patient:
  """
  Attributes:
   - patientId
   - FAM
   - IM
   - OT
   - DR
   - W
   - SNILS
   - MR
   - OKATOG
   - OKATOP
   - spokesman
   - DOCTYPE
   - DOCSER
   - DOCNUM
   - VPOLIS
   - SPOLIS
   - NPOLIS
   - SMO
   - SMO_OGRN
   - SMO_NAM
   - SMO_OK
   - NOVOR
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, -1, ), # 1
    (2, TType.STRING, 'FAM', None, "", ), # 2
    (3, TType.STRING, 'IM', None, "", ), # 3
    (4, TType.STRING, 'OT', None, "", ), # 4
    (5, TType.I64, 'DR', None, -1, ), # 5
    (6, TType.I16, 'W', None, -1, ), # 6
    (7, TType.STRING, 'SNILS', None, None, ), # 7
    (8, TType.STRING, 'MR', None, None, ), # 8
    (9, TType.STRING, 'OKATOG', None, None, ), # 9
    (10, TType.STRING, 'OKATOP', None, None, ), # 10
    (11, TType.STRUCT, 'spokesman', (Spokesman, Spokesman.thrift_spec), None, ), # 11
    (12, TType.STRING, 'DOCTYPE', None, None, ), # 12
    (13, TType.STRING, 'DOCSER', None, None, ), # 13
    (14, TType.STRING, 'DOCNUM', None, None, ), # 14
    (15, TType.I16, 'VPOLIS', None, -1, ), # 15
    (16, TType.STRING, 'SPOLIS', None, None, ), # 16
    (17, TType.STRING, 'NPOLIS', None, "", ), # 17
    (18, TType.STRING, 'SMO', None, "", ), # 18
    (19, TType.STRING, 'SMO_OGRN', None, None, ), # 19
    (20, TType.STRING, 'SMO_NAM', None, None, ), # 20
    (21, TType.STRING, 'SMO_OK', None, None, ), # 21
    (22, TType.STRING, 'NOVOR', None, "", ), # 22
  )

  def __init__(self, patientId=thrift_spec[1][4], FAM=thrift_spec[2][4], IM=thrift_spec[3][4], OT=thrift_spec[4][4], DR=thrift_spec[5][4], W=thrift_spec[6][4], SNILS=None, MR=None, OKATOG=None, OKATOP=None, spokesman=None, DOCTYPE=None, DOCSER=None, DOCNUM=None, VPOLIS=thrift_spec[15][4], SPOLIS=None, NPOLIS=thrift_spec[17][4], SMO=thrift_spec[18][4], SMO_OGRN=None, SMO_NAM=None, SMO_OK=None, NOVOR=thrift_spec[22][4],):
    if patientId is self.thrift_spec[1][4]:
      patientId = -1
    self.patientId = patientId
    self.FAM = FAM
    self.IM = IM
    self.OT = OT
    if DR is self.thrift_spec[5][4]:
      DR = -1
    self.DR = DR
    if W is self.thrift_spec[6][4]:
      W = -1
    self.W = W
    self.SNILS = SNILS
    self.MR = MR
    self.OKATOG = OKATOG
    self.OKATOP = OKATOP
    self.spokesman = spokesman
    self.DOCTYPE = DOCTYPE
    self.DOCSER = DOCSER
    self.DOCNUM = DOCNUM
    if VPOLIS is self.thrift_spec[15][4]:
      VPOLIS = -1
    self.VPOLIS = VPOLIS
    self.SPOLIS = SPOLIS
    self.NPOLIS = NPOLIS
    self.SMO = SMO
    self.SMO_OGRN = SMO_OGRN
    self.SMO_NAM = SMO_NAM
    self.SMO_OK = SMO_OK
    self.NOVOR = NOVOR

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.FAM = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.IM = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.OT = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.DR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.W = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.SNILS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.MR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.OKATOG = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.OKATOP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.spokesman = Spokesman()
          self.spokesman.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.DOCTYPE = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.DOCSER = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.DOCNUM = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.VPOLIS = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.SPOLIS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.NPOLIS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.SMO = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.SMO_OGRN = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.SMO_NAM = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.SMO_OK = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.NOVOR = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Patient')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.FAM is not None:
      oprot.writeFieldBegin('FAM', TType.STRING, 2)
      oprot.writeString(self.FAM)
      oprot.writeFieldEnd()
    if self.IM is not None:
      oprot.writeFieldBegin('IM', TType.STRING, 3)
      oprot.writeString(self.IM)
      oprot.writeFieldEnd()
    if self.OT is not None:
      oprot.writeFieldBegin('OT', TType.STRING, 4)
      oprot.writeString(self.OT)
      oprot.writeFieldEnd()
    if self.DR is not None:
      oprot.writeFieldBegin('DR', TType.I64, 5)
      oprot.writeI64(self.DR)
      oprot.writeFieldEnd()
    if self.W is not None:
      oprot.writeFieldBegin('W', TType.I16, 6)
      oprot.writeI16(self.W)
      oprot.writeFieldEnd()
    if self.SNILS is not None:
      oprot.writeFieldBegin('SNILS', TType.STRING, 7)
      oprot.writeString(self.SNILS)
      oprot.writeFieldEnd()
    if self.MR is not None:
      oprot.writeFieldBegin('MR', TType.STRING, 8)
      oprot.writeString(self.MR)
      oprot.writeFieldEnd()
    if self.OKATOG is not None:
      oprot.writeFieldBegin('OKATOG', TType.STRING, 9)
      oprot.writeString(self.OKATOG)
      oprot.writeFieldEnd()
    if self.OKATOP is not None:
      oprot.writeFieldBegin('OKATOP', TType.STRING, 10)
      oprot.writeString(self.OKATOP)
      oprot.writeFieldEnd()
    if self.spokesman is not None:
      oprot.writeFieldBegin('spokesman', TType.STRUCT, 11)
      self.spokesman.write(oprot)
      oprot.writeFieldEnd()
    if self.DOCTYPE is not None:
      oprot.writeFieldBegin('DOCTYPE', TType.STRING, 12)
      oprot.writeString(self.DOCTYPE)
      oprot.writeFieldEnd()
    if self.DOCSER is not None:
      oprot.writeFieldBegin('DOCSER', TType.STRING, 13)
      oprot.writeString(self.DOCSER)
      oprot.writeFieldEnd()
    if self.DOCNUM is not None:
      oprot.writeFieldBegin('DOCNUM', TType.STRING, 14)
      oprot.writeString(self.DOCNUM)
      oprot.writeFieldEnd()
    if self.VPOLIS is not None:
      oprot.writeFieldBegin('VPOLIS', TType.I16, 15)
      oprot.writeI16(self.VPOLIS)
      oprot.writeFieldEnd()
    if self.SPOLIS is not None:
      oprot.writeFieldBegin('SPOLIS', TType.STRING, 16)
      oprot.writeString(self.SPOLIS)
      oprot.writeFieldEnd()
    if self.NPOLIS is not None:
      oprot.writeFieldBegin('NPOLIS', TType.STRING, 17)
      oprot.writeString(self.NPOLIS)
      oprot.writeFieldEnd()
    if self.SMO is not None:
      oprot.writeFieldBegin('SMO', TType.STRING, 18)
      oprot.writeString(self.SMO)
      oprot.writeFieldEnd()
    if self.SMO_OGRN is not None:
      oprot.writeFieldBegin('SMO_OGRN', TType.STRING, 19)
      oprot.writeString(self.SMO_OGRN)
      oprot.writeFieldEnd()
    if self.SMO_NAM is not None:
      oprot.writeFieldBegin('SMO_NAM', TType.STRING, 20)
      oprot.writeString(self.SMO_NAM)
      oprot.writeFieldEnd()
    if self.SMO_OK is not None:
      oprot.writeFieldBegin('SMO_OK', TType.STRING, 21)
      oprot.writeString(self.SMO_OK)
      oprot.writeFieldEnd()
    if self.NOVOR is not None:
      oprot.writeFieldBegin('NOVOR', TType.STRING, 22)
      oprot.writeString(self.NOVOR)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.patientId is None:
      raise TProtocol.TProtocolException(message='Required field patientId is unset!')
    if self.FAM is None:
      raise TProtocol.TProtocolException(message='Required field FAM is unset!')
    if self.IM is None:
      raise TProtocol.TProtocolException(message='Required field IM is unset!')
    if self.OT is None:
      raise TProtocol.TProtocolException(message='Required field OT is unset!')
    if self.DR is None:
      raise TProtocol.TProtocolException(message='Required field DR is unset!')
    if self.W is None:
      raise TProtocol.TProtocolException(message='Required field W is unset!')
    if self.VPOLIS is None:
      raise TProtocol.TProtocolException(message='Required field VPOLIS is unset!')
    if self.NPOLIS is None:
      raise TProtocol.TProtocolException(message='Required field NPOLIS is unset!')
    if self.SMO is None:
      raise TProtocol.TProtocolException(message='Required field SMO is unset!')
    if self.NOVOR is None:
      raise TProtocol.TProtocolException(message='Required field NOVOR is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Usl:
  """
  Attributes:
   - IDSERV
   - CODE_USL
   - DS
   - KOL_USL
   - TARIF
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'IDSERV', None, -1, ), # 1
    (2, TType.STRING, 'CODE_USL', None, "", ), # 2
    (3, TType.STRING, 'DS', None, "", ), # 3
    (4, TType.DOUBLE, 'KOL_USL', None, -1, ), # 4
    (5, TType.DOUBLE, 'TARIF', None, -1, ), # 5
  )

  def __init__(self, IDSERV=thrift_spec[1][4], CODE_USL=thrift_spec[2][4], DS=thrift_spec[3][4], KOL_USL=thrift_spec[4][4], TARIF=thrift_spec[5][4],):
    if IDSERV is self.thrift_spec[1][4]:
      IDSERV = -1
    self.IDSERV = IDSERV
    self.CODE_USL = CODE_USL
    self.DS = DS
    self.KOL_USL = KOL_USL
    self.TARIF = TARIF

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.IDSERV = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.CODE_USL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.DS = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.KOL_USL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.TARIF = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Usl')
    if self.IDSERV is not None:
      oprot.writeFieldBegin('IDSERV', TType.I32, 1)
      oprot.writeI32(self.IDSERV)
      oprot.writeFieldEnd()
    if self.CODE_USL is not None:
      oprot.writeFieldBegin('CODE_USL', TType.STRING, 2)
      oprot.writeString(self.CODE_USL)
      oprot.writeFieldEnd()
    if self.DS is not None:
      oprot.writeFieldBegin('DS', TType.STRING, 3)
      oprot.writeString(self.DS)
      oprot.writeFieldEnd()
    if self.KOL_USL is not None:
      oprot.writeFieldBegin('KOL_USL', TType.DOUBLE, 4)
      oprot.writeDouble(self.KOL_USL)
      oprot.writeFieldEnd()
    if self.TARIF is not None:
      oprot.writeFieldBegin('TARIF', TType.DOUBLE, 5)
      oprot.writeDouble(self.TARIF)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.IDSERV is None:
      raise TProtocol.TProtocolException(message='Required field IDSERV is unset!')
    if self.CODE_USL is None:
      raise TProtocol.TProtocolException(message='Required field CODE_USL is unset!')
    if self.DS is None:
      raise TProtocol.TProtocolException(message='Required field DS is unset!')
    if self.KOL_USL is None:
      raise TProtocol.TProtocolException(message='Required field KOL_USL is unset!')
    if self.TARIF is None:
      raise TProtocol.TProtocolException(message='Required field TARIF is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Sluch:
  """
  Attributes:
   - IDCASE
   - USL_OK
   - VIDPOM
   - NPR_MO
   - EXTR
   - LPU
   - LPU_1
   - PODR
   - PROFIL
   - DET
   - NHISTORY
   - DATE_1
   - DATE_2
   - DS0
   - DS1
   - DS2
   - CODE_MES1
   - CODE_MES2
   - RSLT
   - ISHOD
   - PRVS
   - IDDOKT
   - IDSP
   - ED_COL
   - SUMV
   - OPLATA
   - USL
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'IDCASE', None, -1, ), # 1
    (2, TType.I16, 'USL_OK', None, -1, ), # 2
    (3, TType.I16, 'VIDPOM', None, -1, ), # 3
    (4, TType.STRING, 'NPR_MO', None, None, ), # 4
    (5, TType.I16, 'EXTR', None, None, ), # 5
    (6, TType.STRING, 'LPU', None, "", ), # 6
    (7, TType.STRING, 'LPU_1', None, None, ), # 7
    (8, TType.STRING, 'PODR', None, None, ), # 8
    (9, TType.I16, 'PROFIL', None, -1, ), # 9
    (10, TType.BOOL, 'DET', None, None, ), # 10
    (11, TType.STRING, 'NHISTORY', None, "", ), # 11
    (12, TType.I64, 'DATE_1', None, -1, ), # 12
    (13, TType.I64, 'DATE_2', None, -1, ), # 13
    (14, TType.STRING, 'DS0', None, None, ), # 14
    (15, TType.STRING, 'DS1', None, "", ), # 15
    (16, TType.STRING, 'DS2', None, None, ), # 16
    (17, TType.STRING, 'CODE_MES1', None, None, ), # 17
    (18, TType.STRING, 'CODE_MES2', None, None, ), # 18
    (19, TType.I16, 'RSLT', None, -1, ), # 19
    (20, TType.I16, 'ISHOD', None, -1, ), # 20
    (21, TType.I32, 'PRVS', None, -1, ), # 21
    (22, TType.STRING, 'IDDOKT', None, "", ), # 22
    (23, TType.I16, 'IDSP', None, -1, ), # 23
    (24, TType.DOUBLE, 'ED_COL', None, -1, ), # 24
    (25, TType.DOUBLE, 'SUMV', None, -1, ), # 25
    (26, TType.I16, 'OPLATA', None, None, ), # 26
    (27, TType.LIST, 'USL', (TType.STRUCT,(Usl, Usl.thrift_spec)), None, ), # 27
  )

  def __init__(self, IDCASE=thrift_spec[1][4], USL_OK=thrift_spec[2][4], VIDPOM=thrift_spec[3][4], NPR_MO=None, EXTR=None, LPU=thrift_spec[6][4], LPU_1=None, PODR=None, PROFIL=thrift_spec[9][4], DET=None, NHISTORY=thrift_spec[11][4], DATE_1=thrift_spec[12][4], DATE_2=thrift_spec[13][4], DS0=None, DS1=thrift_spec[15][4], DS2=None, CODE_MES1=None, CODE_MES2=None, RSLT=thrift_spec[19][4], ISHOD=thrift_spec[20][4], PRVS=thrift_spec[21][4], IDDOKT=thrift_spec[22][4], IDSP=thrift_spec[23][4], ED_COL=thrift_spec[24][4], SUMV=thrift_spec[25][4], OPLATA=None, USL=None,):
    if IDCASE is self.thrift_spec[1][4]:
      IDCASE = -1
    self.IDCASE = IDCASE
    if USL_OK is self.thrift_spec[2][4]:
      USL_OK = -1
    self.USL_OK = USL_OK
    if VIDPOM is self.thrift_spec[3][4]:
      VIDPOM = -1
    self.VIDPOM = VIDPOM
    self.NPR_MO = NPR_MO
    self.EXTR = EXTR
    self.LPU = LPU
    self.LPU_1 = LPU_1
    self.PODR = PODR
    if PROFIL is self.thrift_spec[9][4]:
      PROFIL = -1
    self.PROFIL = PROFIL
    self.DET = DET
    self.NHISTORY = NHISTORY
    if DATE_1 is self.thrift_spec[12][4]:
      DATE_1 = -1
    self.DATE_1 = DATE_1
    if DATE_2 is self.thrift_spec[13][4]:
      DATE_2 = -1
    self.DATE_2 = DATE_2
    self.DS0 = DS0
    self.DS1 = DS1
    self.DS2 = DS2
    self.CODE_MES1 = CODE_MES1
    self.CODE_MES2 = CODE_MES2
    if RSLT is self.thrift_spec[19][4]:
      RSLT = -1
    self.RSLT = RSLT
    if ISHOD is self.thrift_spec[20][4]:
      ISHOD = -1
    self.ISHOD = ISHOD
    if PRVS is self.thrift_spec[21][4]:
      PRVS = -1
    self.PRVS = PRVS
    self.IDDOKT = IDDOKT
    if IDSP is self.thrift_spec[23][4]:
      IDSP = -1
    self.IDSP = IDSP
    self.ED_COL = ED_COL
    self.SUMV = SUMV
    self.OPLATA = OPLATA
    self.USL = USL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.IDCASE = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.USL_OK = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.VIDPOM = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.NPR_MO = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.EXTR = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.LPU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.LPU_1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.PODR = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.PROFIL = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.DET = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.NHISTORY = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.DATE_1 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.DATE_2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.DS0 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.DS1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.DS2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.CODE_MES1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.CODE_MES2 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I16:
          self.RSLT = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.ISHOD = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.PRVS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.IDDOKT = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I16:
          self.IDSP = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.ED_COL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.SUMV = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I16:
          self.OPLATA = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.USL = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Usl()
            _elem5.read(iprot)
            self.USL.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Sluch')
    if self.IDCASE is not None:
      oprot.writeFieldBegin('IDCASE', TType.I32, 1)
      oprot.writeI32(self.IDCASE)
      oprot.writeFieldEnd()
    if self.USL_OK is not None:
      oprot.writeFieldBegin('USL_OK', TType.I16, 2)
      oprot.writeI16(self.USL_OK)
      oprot.writeFieldEnd()
    if self.VIDPOM is not None:
      oprot.writeFieldBegin('VIDPOM', TType.I16, 3)
      oprot.writeI16(self.VIDPOM)
      oprot.writeFieldEnd()
    if self.NPR_MO is not None:
      oprot.writeFieldBegin('NPR_MO', TType.STRING, 4)
      oprot.writeString(self.NPR_MO)
      oprot.writeFieldEnd()
    if self.EXTR is not None:
      oprot.writeFieldBegin('EXTR', TType.I16, 5)
      oprot.writeI16(self.EXTR)
      oprot.writeFieldEnd()
    if self.LPU is not None:
      oprot.writeFieldBegin('LPU', TType.STRING, 6)
      oprot.writeString(self.LPU)
      oprot.writeFieldEnd()
    if self.LPU_1 is not None:
      oprot.writeFieldBegin('LPU_1', TType.STRING, 7)
      oprot.writeString(self.LPU_1)
      oprot.writeFieldEnd()
    if self.PODR is not None:
      oprot.writeFieldBegin('PODR', TType.STRING, 8)
      oprot.writeString(self.PODR)
      oprot.writeFieldEnd()
    if self.PROFIL is not None:
      oprot.writeFieldBegin('PROFIL', TType.I16, 9)
      oprot.writeI16(self.PROFIL)
      oprot.writeFieldEnd()
    if self.DET is not None:
      oprot.writeFieldBegin('DET', TType.BOOL, 10)
      oprot.writeBool(self.DET)
      oprot.writeFieldEnd()
    if self.NHISTORY is not None:
      oprot.writeFieldBegin('NHISTORY', TType.STRING, 11)
      oprot.writeString(self.NHISTORY)
      oprot.writeFieldEnd()
    if self.DATE_1 is not None:
      oprot.writeFieldBegin('DATE_1', TType.I64, 12)
      oprot.writeI64(self.DATE_1)
      oprot.writeFieldEnd()
    if self.DATE_2 is not None:
      oprot.writeFieldBegin('DATE_2', TType.I64, 13)
      oprot.writeI64(self.DATE_2)
      oprot.writeFieldEnd()
    if self.DS0 is not None:
      oprot.writeFieldBegin('DS0', TType.STRING, 14)
      oprot.writeString(self.DS0)
      oprot.writeFieldEnd()
    if self.DS1 is not None:
      oprot.writeFieldBegin('DS1', TType.STRING, 15)
      oprot.writeString(self.DS1)
      oprot.writeFieldEnd()
    if self.DS2 is not None:
      oprot.writeFieldBegin('DS2', TType.STRING, 16)
      oprot.writeString(self.DS2)
      oprot.writeFieldEnd()
    if self.CODE_MES1 is not None:
      oprot.writeFieldBegin('CODE_MES1', TType.STRING, 17)
      oprot.writeString(self.CODE_MES1)
      oprot.writeFieldEnd()
    if self.CODE_MES2 is not None:
      oprot.writeFieldBegin('CODE_MES2', TType.STRING, 18)
      oprot.writeString(self.CODE_MES2)
      oprot.writeFieldEnd()
    if self.RSLT is not None:
      oprot.writeFieldBegin('RSLT', TType.I16, 19)
      oprot.writeI16(self.RSLT)
      oprot.writeFieldEnd()
    if self.ISHOD is not None:
      oprot.writeFieldBegin('ISHOD', TType.I16, 20)
      oprot.writeI16(self.ISHOD)
      oprot.writeFieldEnd()
    if self.PRVS is not None:
      oprot.writeFieldBegin('PRVS', TType.I32, 21)
      oprot.writeI32(self.PRVS)
      oprot.writeFieldEnd()
    if self.IDDOKT is not None:
      oprot.writeFieldBegin('IDDOKT', TType.STRING, 22)
      oprot.writeString(self.IDDOKT)
      oprot.writeFieldEnd()
    if self.IDSP is not None:
      oprot.writeFieldBegin('IDSP', TType.I16, 23)
      oprot.writeI16(self.IDSP)
      oprot.writeFieldEnd()
    if self.ED_COL is not None:
      oprot.writeFieldBegin('ED_COL', TType.DOUBLE, 24)
      oprot.writeDouble(self.ED_COL)
      oprot.writeFieldEnd()
    if self.SUMV is not None:
      oprot.writeFieldBegin('SUMV', TType.DOUBLE, 25)
      oprot.writeDouble(self.SUMV)
      oprot.writeFieldEnd()
    if self.OPLATA is not None:
      oprot.writeFieldBegin('OPLATA', TType.I16, 26)
      oprot.writeI16(self.OPLATA)
      oprot.writeFieldEnd()
    if self.USL is not None:
      oprot.writeFieldBegin('USL', TType.LIST, 27)
      oprot.writeListBegin(TType.STRUCT, len(self.USL))
      for iter6 in self.USL:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.IDCASE is None:
      raise TProtocol.TProtocolException(message='Required field IDCASE is unset!')
    if self.USL_OK is None:
      raise TProtocol.TProtocolException(message='Required field USL_OK is unset!')
    if self.VIDPOM is None:
      raise TProtocol.TProtocolException(message='Required field VIDPOM is unset!')
    if self.LPU is None:
      raise TProtocol.TProtocolException(message='Required field LPU is unset!')
    if self.PROFIL is None:
      raise TProtocol.TProtocolException(message='Required field PROFIL is unset!')
    if self.NHISTORY is None:
      raise TProtocol.TProtocolException(message='Required field NHISTORY is unset!')
    if self.DATE_1 is None:
      raise TProtocol.TProtocolException(message='Required field DATE_1 is unset!')
    if self.DATE_2 is None:
      raise TProtocol.TProtocolException(message='Required field DATE_2 is unset!')
    if self.DS1 is None:
      raise TProtocol.TProtocolException(message='Required field DS1 is unset!')
    if self.RSLT is None:
      raise TProtocol.TProtocolException(message='Required field RSLT is unset!')
    if self.ISHOD is None:
      raise TProtocol.TProtocolException(message='Required field ISHOD is unset!')
    if self.PRVS is None:
      raise TProtocol.TProtocolException(message='Required field PRVS is unset!')
    if self.IDDOKT is None:
      raise TProtocol.TProtocolException(message='Required field IDDOKT is unset!')
    if self.IDSP is None:
      raise TProtocol.TProtocolException(message='Required field IDSP is unset!')
    if self.ED_COL is None:
      raise TProtocol.TProtocolException(message='Required field ED_COL is unset!')
    if self.SUMV is None:
      raise TProtocol.TProtocolException(message='Required field SUMV is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotFoundException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotFoundException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SQLException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SQLException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidArgumentException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidArgumentException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
