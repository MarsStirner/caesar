#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getServiceAndPatientRegistry(self, beginDate, endDate, optionalFields):
    """
    Parameters:
     - beginDate
     - endDate
     - optionalFields
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getServiceAndPatientRegistry(self, beginDate, endDate, optionalFields):
    """
    Parameters:
     - beginDate
     - endDate
     - optionalFields
    """
    self.send_getServiceAndPatientRegistry(beginDate, endDate, optionalFields)
    return self.recv_getServiceAndPatientRegistry()

  def send_getServiceAndPatientRegistry(self, beginDate, endDate, optionalFields):
    self._oprot.writeMessageBegin('getServiceAndPatientRegistry', TMessageType.CALL, self._seqid)
    args = getServiceAndPatientRegistry_args()
    args.beginDate = beginDate
    args.endDate = endDate
    args.optionalFields = optionalFields
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServiceAndPatientRegistry(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getServiceAndPatientRegistry_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.argExc is not None:
      raise result.argExc
    if result.sqlExc is not None:
      raise result.sqlExc
    if result.exc is not None:
      raise result.exc
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServiceAndPatientRegistry failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getServiceAndPatientRegistry"] = Processor.process_getServiceAndPatientRegistry

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getServiceAndPatientRegistry(self, seqid, iprot, oprot):
    args = getServiceAndPatientRegistry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServiceAndPatientRegistry_result()
    try:
      result.success = self._handler.getServiceAndPatientRegistry(args.beginDate, args.endDate, args.optionalFields)
    except InvalidArgumentException as argExc:
      result.argExc = argExc
    except SQLException as sqlExc:
      result.sqlExc = sqlExc
    except NotFoundException as exc:
      result.exc = exc
    oprot.writeMessageBegin("getServiceAndPatientRegistry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getServiceAndPatientRegistry_args:
  """
  Attributes:
   - beginDate
   - endDate
   - optionalFields
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'beginDate', None, None, ), # 1
    (2, TType.I64, 'endDate', None, None, ), # 2
    (3, TType.LIST, 'optionalFields', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, beginDate=None, endDate=None, optionalFields=None,):
    self.beginDate = beginDate
    self.endDate = endDate
    self.optionalFields = optionalFields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.beginDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.optionalFields = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.optionalFields.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServiceAndPatientRegistry_args')
    if self.beginDate is not None:
      oprot.writeFieldBegin('beginDate', TType.I64, 1)
      oprot.writeI64(self.beginDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 2)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.optionalFields is not None:
      oprot.writeFieldBegin('optionalFields', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.optionalFields))
      for iter34 in self.optionalFields:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServiceAndPatientRegistry_result:
  """
  Attributes:
   - success
   - argExc
   - sqlExc
   - exc
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ServiceAndPatientRegistry, ServiceAndPatientRegistry.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'argExc', (InvalidArgumentException, InvalidArgumentException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'sqlExc', (SQLException, SQLException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'exc', (NotFoundException, NotFoundException.thrift_spec), None, ), # 3
  )

  def __init__(self, success=None, argExc=None, sqlExc=None, exc=None,):
    self.success = success
    self.argExc = argExc
    self.sqlExc = sqlExc
    self.exc = exc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ServiceAndPatientRegistry()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.argExc = InvalidArgumentException()
          self.argExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.sqlExc = SQLException()
          self.sqlExc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.exc = NotFoundException()
          self.exc.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServiceAndPatientRegistry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.argExc is not None:
      oprot.writeFieldBegin('argExc', TType.STRUCT, 1)
      self.argExc.write(oprot)
      oprot.writeFieldEnd()
    if self.sqlExc is not None:
      oprot.writeFieldBegin('sqlExc', TType.STRUCT, 2)
      self.sqlExc.write(oprot)
      oprot.writeFieldEnd()
    if self.exc is not None:
      oprot.writeFieldBegin('exc', TType.STRUCT, 3)
      self.exc.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
