#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ClientAddress(object):
  """
  ClientAddress
  Данные об адресе пациента для записи реестра услуг
  *************************************************


  Attributes:
   - STREET
   - STREETTYPE
   - AREA
   - HOUSE
   - KORP
   - FLAT
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'STREET', None, None, ), # 1
    (2, TType.STRING, 'STREETTYPE', None, None, ), # 2
    (3, TType.STRING, 'AREA', None, None, ), # 3
    (4, TType.STRING, 'HOUSE', None, None, ), # 4
    (5, TType.STRING, 'KORP', None, None, ), # 5
    (6, TType.STRING, 'FLAT', None, None, ), # 6
  )

  def __init__(self, STREET=None, STREETTYPE=None, AREA=None, HOUSE=None, KORP=None, FLAT=None,):
    self.STREET = STREET
    self.STREETTYPE = STREETTYPE
    self.AREA = AREA
    self.HOUSE = HOUSE
    self.KORP = KORP
    self.FLAT = FLAT

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.STREET = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.STREETTYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.AREA = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.HOUSE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.KORP = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.FLAT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientAddress')
    if self.STREET is not None:
      oprot.writeFieldBegin('STREET', TType.STRING, 1)
      oprot.writeString(self.STREET.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.STREETTYPE is not None:
      oprot.writeFieldBegin('STREETTYPE', TType.STRING, 2)
      oprot.writeString(self.STREETTYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.AREA is not None:
      oprot.writeFieldBegin('AREA', TType.STRING, 3)
      oprot.writeString(self.AREA.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.HOUSE is not None:
      oprot.writeFieldBegin('HOUSE', TType.STRING, 4)
      oprot.writeString(self.HOUSE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KORP is not None:
      oprot.writeFieldBegin('KORP', TType.STRING, 5)
      oprot.writeString(self.KORP.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.FLAT is not None:
      oprot.writeFieldBegin('FLAT', TType.STRING, 6)
      oprot.writeString(self.FLAT.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientDocument(object):
  """
  ClientDocument
  Данные о документе пациента для записи реестра услуг
  *************************************************


  Attributes:
   - TYPEDOC
   - SER1
   - SER2
   - NPASP
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'TYPEDOC', None, None, ), # 1
    (2, TType.STRING, 'SER1', None, None, ), # 2
    (3, TType.STRING, 'SER2', None, None, ), # 3
    (4, TType.STRING, 'NPASP', None, None, ), # 4
  )

  def __init__(self, TYPEDOC=None, SER1=None, SER2=None, NPASP=None,):
    self.TYPEDOC = TYPEDOC
    self.SER1 = SER1
    self.SER2 = SER2
    self.NPASP = NPASP

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.TYPEDOC = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.SER1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SER2 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.NPASP = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientDocument')
    if self.TYPEDOC is not None:
      oprot.writeFieldBegin('TYPEDOC', TType.STRING, 1)
      oprot.writeString(self.TYPEDOC.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER1 is not None:
      oprot.writeFieldBegin('SER1', TType.STRING, 2)
      oprot.writeString(self.SER1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER2 is not None:
      oprot.writeFieldBegin('SER2', TType.STRING, 3)
      oprot.writeString(self.SER2.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NPASP is not None:
      oprot.writeFieldBegin('NPASP', TType.STRING, 4)
      oprot.writeString(self.NPASP.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceEntry(object):
  """
  ServiceEntry
  Данные о записи в реестре услуг
  ***********************************
  @param SURNAME - Фамилия пациента


  Attributes:
   - SURNAME
   - NAME1
   - NAME2
   - BIRTHDAY
   - SEX
   - ORDER
   - POLIS_S
   - POLIS_N
   - PAYER
   - clientAddressInfo
   - PROFILE
   - PROFILENET
   - DATEIN
   - DATEOUT
   - AMOUNT
   - DIAGNOSIS
   - DIAG_PREF
   - SEND
   - ERROR
   - clientDocumentInfo
   - SERV_ID
   - ID_PRVS
   - IDPRVSTYPE
   - PRVS_PR_G
   - ID_EXITUS
   - ILLHISTORY
   - CASE_CAST
   - AMOUNT_D
   - ID_PRMP
   - ID_PRMP_C
   - DIAG_C
   - DIAG_S_C
   - DIAG_P_C
   - QRESULT
   - ID_PRVS_C
   - ID_ED_PAY
   - ID_VMP
   - ID_DOC
   - ID_DEPT
   - ID_DOC_C
   - ID_DEPT_C
   - ID_LPU_D
   - IS_CRIM
   - IDSERVDATA
   - IDSERVMADE
   - IDSERVLPU
   - ID_GOAL
   - ID_GOAL_C
   - ID_PAT_CAT
   - ID_GOSP
   - IDVIDVME
   - IDFORPOM
   - ID_PRVS_D
   - ID_GOAL_D
   - IDMETHMP
   - ID_LPU
   - N_BORN
   - IS_STAGE
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'SURNAME', None, None, ), # 1
    (2, TType.STRING, 'NAME1', None, None, ), # 2
    (3, TType.STRING, 'NAME2', None, None, ), # 3
    (4, TType.I64, 'BIRTHDAY', None, None, ), # 4
    (5, TType.I16, 'SEX', None, None, ), # 5
    (6, TType.STRING, 'ORDER', None, None, ), # 6
    (7, TType.STRING, 'POLIS_S', None, None, ), # 7
    (8, TType.STRING, 'POLIS_N', None, None, ), # 8
    (9, TType.STRING, 'PAYER', None, None, ), # 9
    (10, TType.STRUCT, 'clientAddressInfo', (ClientAddress, ClientAddress.thrift_spec), None, ), # 10
    (11, TType.STRING, 'PROFILE', None, None, ), # 11
    (12, TType.STRING, 'PROFILENET', None, None, ), # 12
    (13, TType.I64, 'DATEIN', None, None, ), # 13
    (14, TType.I64, 'DATEOUT', None, None, ), # 14
    (15, TType.I16, 'AMOUNT', None, None, ), # 15
    (16, TType.STRING, 'DIAGNOSIS', None, None, ), # 16
    (17, TType.STRING, 'DIAG_PREF', None, None, ), # 17
    (18, TType.BOOL, 'SEND', None, False, ), # 18
    (19, TType.STRING, 'ERROR', None, None, ), # 19
    (20, TType.STRUCT, 'clientDocumentInfo', (ClientDocument, ClientDocument.thrift_spec), None, ), # 20
    (21, TType.I32, 'SERV_ID', None, None, ), # 21
    (22, TType.I32, 'ID_PRVS', None, None, ), # 22
    (23, TType.I32, 'IDPRVSTYPE', None, None, ), # 23
    (24, TType.I32, 'PRVS_PR_G', None, None, ), # 24
    (25, TType.I32, 'ID_EXITUS', None, None, ), # 25
    (26, TType.STRING, 'ILLHISTORY', None, None, ), # 26
    (27, TType.I32, 'CASE_CAST', None, None, ), # 27
    (28, TType.I32, 'AMOUNT_D', None, 0, ), # 28
    (29, TType.I32, 'ID_PRMP', None, None, ), # 29
    (30, TType.I32, 'ID_PRMP_C', None, None, ), # 30
    (31, TType.STRING, 'DIAG_C', None, None, ), # 31
    (32, TType.STRING, 'DIAG_S_C', None, None, ), # 32
    (33, TType.STRING, 'DIAG_P_C', None, None, ), # 33
    (34, TType.I32, 'QRESULT', None, None, ), # 34
    (35, TType.I32, 'ID_PRVS_C', None, None, ), # 35
    (36, TType.I32, 'ID_ED_PAY', None, None, ), # 36
    (37, TType.I32, 'ID_VMP', None, None, ), # 37
    (38, TType.STRING, 'ID_DOC', None, None, ), # 38
    (39, TType.STRING, 'ID_DEPT', None, None, ), # 39
    (40, TType.STRING, 'ID_DOC_C', None, None, ), # 40
    (41, TType.STRING, 'ID_DEPT_C', None, None, ), # 41
    (42, TType.I32, 'ID_LPU_D', None, None, ), # 42
    (43, TType.BOOL, 'IS_CRIM', None, False, ), # 43
    (44, TType.I32, 'IDSERVDATA', None, None, ), # 44
    (45, TType.I32, 'IDSERVMADE', None, None, ), # 45
    (46, TType.I32, 'IDSERVLPU', None, None, ), # 46
    (47, TType.I32, 'ID_GOAL', None, 1, ), # 47
    (48, TType.I32, 'ID_GOAL_C', None, 1, ), # 48
    (49, TType.I32, 'ID_PAT_CAT', None, None, ), # 49
    (50, TType.I32, 'ID_GOSP', None, 5, ), # 50
    (51, TType.I32, 'IDVIDVME', None, None, ), # 51
    (52, TType.I32, 'IDFORPOM', None, None, ), # 52
    (53, TType.I32, 'ID_PRVS_D', None, None, ), # 53
    (54, TType.I32, 'ID_GOAL_D', None, None, ), # 54
    (55, TType.I32, 'IDMETHMP', None, None, ), # 55
    (56, TType.I32, 'ID_LPU', None, None, ), # 56
    (57, TType.I16, 'N_BORN', None, None, ), # 57
    (58, TType.BOOL, 'IS_STAGE', None, False, ), # 58
  )

  def __init__(self, SURNAME=None, NAME1=None, NAME2=None, BIRTHDAY=None, SEX=None, ORDER=None, POLIS_S=None, POLIS_N=None, PAYER=None, clientAddressInfo=None, PROFILE=None, PROFILENET=None, DATEIN=None, DATEOUT=None, AMOUNT=None, DIAGNOSIS=None, DIAG_PREF=None, SEND=thrift_spec[18][4], ERROR=None, clientDocumentInfo=None, SERV_ID=None, ID_PRVS=None, IDPRVSTYPE=None, PRVS_PR_G=None, ID_EXITUS=None, ILLHISTORY=None, CASE_CAST=None, AMOUNT_D=thrift_spec[28][4], ID_PRMP=None, ID_PRMP_C=None, DIAG_C=None, DIAG_S_C=None, DIAG_P_C=None, QRESULT=None, ID_PRVS_C=None, ID_ED_PAY=None, ID_VMP=None, ID_DOC=None, ID_DEPT=None, ID_DOC_C=None, ID_DEPT_C=None, ID_LPU_D=None, IS_CRIM=thrift_spec[43][4], IDSERVDATA=None, IDSERVMADE=None, IDSERVLPU=None, ID_GOAL=thrift_spec[47][4], ID_GOAL_C=thrift_spec[48][4], ID_PAT_CAT=None, ID_GOSP=thrift_spec[50][4], IDVIDVME=None, IDFORPOM=None, ID_PRVS_D=None, ID_GOAL_D=None, IDMETHMP=None, ID_LPU=None, N_BORN=None, IS_STAGE=thrift_spec[58][4],):
    self.SURNAME = SURNAME
    self.NAME1 = NAME1
    self.NAME2 = NAME2
    self.BIRTHDAY = BIRTHDAY
    self.SEX = SEX
    self.ORDER = ORDER
    self.POLIS_S = POLIS_S
    self.POLIS_N = POLIS_N
    self.PAYER = PAYER
    self.clientAddressInfo = clientAddressInfo
    self.PROFILE = PROFILE
    self.PROFILENET = PROFILENET
    self.DATEIN = DATEIN
    self.DATEOUT = DATEOUT
    self.AMOUNT = AMOUNT
    self.DIAGNOSIS = DIAGNOSIS
    self.DIAG_PREF = DIAG_PREF
    self.SEND = SEND
    self.ERROR = ERROR
    self.clientDocumentInfo = clientDocumentInfo
    self.SERV_ID = SERV_ID
    self.ID_PRVS = ID_PRVS
    self.IDPRVSTYPE = IDPRVSTYPE
    self.PRVS_PR_G = PRVS_PR_G
    self.ID_EXITUS = ID_EXITUS
    self.ILLHISTORY = ILLHISTORY
    self.CASE_CAST = CASE_CAST
    if AMOUNT_D is self.thrift_spec[28][4]:
      AMOUNT_D = 0
    self.AMOUNT_D = AMOUNT_D
    self.ID_PRMP = ID_PRMP
    self.ID_PRMP_C = ID_PRMP_C
    self.DIAG_C = DIAG_C
    self.DIAG_S_C = DIAG_S_C
    self.DIAG_P_C = DIAG_P_C
    self.QRESULT = QRESULT
    self.ID_PRVS_C = ID_PRVS_C
    self.ID_ED_PAY = ID_ED_PAY
    self.ID_VMP = ID_VMP
    self.ID_DOC = ID_DOC
    self.ID_DEPT = ID_DEPT
    self.ID_DOC_C = ID_DOC_C
    self.ID_DEPT_C = ID_DEPT_C
    self.ID_LPU_D = ID_LPU_D
    self.IS_CRIM = IS_CRIM
    self.IDSERVDATA = IDSERVDATA
    self.IDSERVMADE = IDSERVMADE
    self.IDSERVLPU = IDSERVLPU
    if ID_GOAL is self.thrift_spec[47][4]:
      ID_GOAL = 1
    self.ID_GOAL = ID_GOAL
    if ID_GOAL_C is self.thrift_spec[48][4]:
      ID_GOAL_C = 1
    self.ID_GOAL_C = ID_GOAL_C
    self.ID_PAT_CAT = ID_PAT_CAT
    if ID_GOSP is self.thrift_spec[50][4]:
      ID_GOSP = 5
    self.ID_GOSP = ID_GOSP
    self.IDVIDVME = IDVIDVME
    self.IDFORPOM = IDFORPOM
    self.ID_PRVS_D = ID_PRVS_D
    self.ID_GOAL_D = ID_GOAL_D
    self.IDMETHMP = IDMETHMP
    self.ID_LPU = ID_LPU
    self.N_BORN = N_BORN
    self.IS_STAGE = IS_STAGE

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.SURNAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.NAME1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.NAME2 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.BIRTHDAY = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.SEX = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ORDER = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.POLIS_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.POLIS_N = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.PAYER = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.clientAddressInfo = ClientAddress()
          self.clientAddressInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.PROFILE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.PROFILENET = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.DATEIN = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.DATEOUT = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.AMOUNT = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.DIAGNOSIS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.DIAG_PREF = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.SEND = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.ERROR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.clientDocumentInfo = ClientDocument()
          self.clientDocumentInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.SERV_ID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.ID_PRVS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.IDPRVSTYPE = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.PRVS_PR_G = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.ID_EXITUS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.ILLHISTORY = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.CASE_CAST = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.AMOUNT_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.ID_PRMP = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.ID_PRMP_C = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.DIAG_C = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.DIAG_S_C = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.DIAG_P_C = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.QRESULT = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.ID_PRVS_C = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.ID_ED_PAY = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.ID_VMP = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.ID_DOC = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.ID_DEPT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.ID_DOC_C = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.ID_DEPT_C = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.ID_LPU_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.BOOL:
          self.IS_CRIM = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.IDSERVDATA = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.IDSERVMADE = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.IDSERVLPU = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.ID_GOAL = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.ID_GOAL_C = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.ID_PAT_CAT = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.ID_GOSP = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I32:
          self.IDVIDVME = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I32:
          self.IDFORPOM = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.ID_PRVS_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.I32:
          self.ID_GOAL_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I32:
          self.IDMETHMP = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.I32:
          self.ID_LPU = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.I16:
          self.N_BORN = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.BOOL:
          self.IS_STAGE = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceEntry')
    if self.SURNAME is not None:
      oprot.writeFieldBegin('SURNAME', TType.STRING, 1)
      oprot.writeString(self.SURNAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NAME1 is not None:
      oprot.writeFieldBegin('NAME1', TType.STRING, 2)
      oprot.writeString(self.NAME1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NAME2 is not None:
      oprot.writeFieldBegin('NAME2', TType.STRING, 3)
      oprot.writeString(self.NAME2.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.BIRTHDAY is not None:
      oprot.writeFieldBegin('BIRTHDAY', TType.I64, 4)
      oprot.writeI64(self.BIRTHDAY)
      oprot.writeFieldEnd()
    if self.SEX is not None:
      oprot.writeFieldBegin('SEX', TType.I16, 5)
      oprot.writeI16(self.SEX)
      oprot.writeFieldEnd()
    if self.ORDER is not None:
      oprot.writeFieldBegin('ORDER', TType.STRING, 6)
      oprot.writeString(self.ORDER.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POLIS_S is not None:
      oprot.writeFieldBegin('POLIS_S', TType.STRING, 7)
      oprot.writeString(self.POLIS_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POLIS_N is not None:
      oprot.writeFieldBegin('POLIS_N', TType.STRING, 8)
      oprot.writeString(self.POLIS_N.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.PAYER is not None:
      oprot.writeFieldBegin('PAYER', TType.STRING, 9)
      oprot.writeString(self.PAYER.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientAddressInfo is not None:
      oprot.writeFieldBegin('clientAddressInfo', TType.STRUCT, 10)
      self.clientAddressInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.PROFILE is not None:
      oprot.writeFieldBegin('PROFILE', TType.STRING, 11)
      oprot.writeString(self.PROFILE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.PROFILENET is not None:
      oprot.writeFieldBegin('PROFILENET', TType.STRING, 12)
      oprot.writeString(self.PROFILENET.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DATEIN is not None:
      oprot.writeFieldBegin('DATEIN', TType.I64, 13)
      oprot.writeI64(self.DATEIN)
      oprot.writeFieldEnd()
    if self.DATEOUT is not None:
      oprot.writeFieldBegin('DATEOUT', TType.I64, 14)
      oprot.writeI64(self.DATEOUT)
      oprot.writeFieldEnd()
    if self.AMOUNT is not None:
      oprot.writeFieldBegin('AMOUNT', TType.I16, 15)
      oprot.writeI16(self.AMOUNT)
      oprot.writeFieldEnd()
    if self.DIAGNOSIS is not None:
      oprot.writeFieldBegin('DIAGNOSIS', TType.STRING, 16)
      oprot.writeString(self.DIAGNOSIS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIAG_PREF is not None:
      oprot.writeFieldBegin('DIAG_PREF', TType.STRING, 17)
      oprot.writeString(self.DIAG_PREF.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SEND is not None:
      oprot.writeFieldBegin('SEND', TType.BOOL, 18)
      oprot.writeBool(self.SEND)
      oprot.writeFieldEnd()
    if self.ERROR is not None:
      oprot.writeFieldBegin('ERROR', TType.STRING, 19)
      oprot.writeString(self.ERROR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.clientDocumentInfo is not None:
      oprot.writeFieldBegin('clientDocumentInfo', TType.STRUCT, 20)
      self.clientDocumentInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.SERV_ID is not None:
      oprot.writeFieldBegin('SERV_ID', TType.I32, 21)
      oprot.writeI32(self.SERV_ID)
      oprot.writeFieldEnd()
    if self.ID_PRVS is not None:
      oprot.writeFieldBegin('ID_PRVS', TType.I32, 22)
      oprot.writeI32(self.ID_PRVS)
      oprot.writeFieldEnd()
    if self.IDPRVSTYPE is not None:
      oprot.writeFieldBegin('IDPRVSTYPE', TType.I32, 23)
      oprot.writeI32(self.IDPRVSTYPE)
      oprot.writeFieldEnd()
    if self.PRVS_PR_G is not None:
      oprot.writeFieldBegin('PRVS_PR_G', TType.I32, 24)
      oprot.writeI32(self.PRVS_PR_G)
      oprot.writeFieldEnd()
    if self.ID_EXITUS is not None:
      oprot.writeFieldBegin('ID_EXITUS', TType.I32, 25)
      oprot.writeI32(self.ID_EXITUS)
      oprot.writeFieldEnd()
    if self.ILLHISTORY is not None:
      oprot.writeFieldBegin('ILLHISTORY', TType.STRING, 26)
      oprot.writeString(self.ILLHISTORY.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.CASE_CAST is not None:
      oprot.writeFieldBegin('CASE_CAST', TType.I32, 27)
      oprot.writeI32(self.CASE_CAST)
      oprot.writeFieldEnd()
    if self.AMOUNT_D is not None:
      oprot.writeFieldBegin('AMOUNT_D', TType.I32, 28)
      oprot.writeI32(self.AMOUNT_D)
      oprot.writeFieldEnd()
    if self.ID_PRMP is not None:
      oprot.writeFieldBegin('ID_PRMP', TType.I32, 29)
      oprot.writeI32(self.ID_PRMP)
      oprot.writeFieldEnd()
    if self.ID_PRMP_C is not None:
      oprot.writeFieldBegin('ID_PRMP_C', TType.I32, 30)
      oprot.writeI32(self.ID_PRMP_C)
      oprot.writeFieldEnd()
    if self.DIAG_C is not None:
      oprot.writeFieldBegin('DIAG_C', TType.STRING, 31)
      oprot.writeString(self.DIAG_C.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIAG_S_C is not None:
      oprot.writeFieldBegin('DIAG_S_C', TType.STRING, 32)
      oprot.writeString(self.DIAG_S_C.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIAG_P_C is not None:
      oprot.writeFieldBegin('DIAG_P_C', TType.STRING, 33)
      oprot.writeString(self.DIAG_P_C.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.QRESULT is not None:
      oprot.writeFieldBegin('QRESULT', TType.I32, 34)
      oprot.writeI32(self.QRESULT)
      oprot.writeFieldEnd()
    if self.ID_PRVS_C is not None:
      oprot.writeFieldBegin('ID_PRVS_C', TType.I32, 35)
      oprot.writeI32(self.ID_PRVS_C)
      oprot.writeFieldEnd()
    if self.ID_ED_PAY is not None:
      oprot.writeFieldBegin('ID_ED_PAY', TType.I32, 36)
      oprot.writeI32(self.ID_ED_PAY)
      oprot.writeFieldEnd()
    if self.ID_VMP is not None:
      oprot.writeFieldBegin('ID_VMP', TType.I32, 37)
      oprot.writeI32(self.ID_VMP)
      oprot.writeFieldEnd()
    if self.ID_DOC is not None:
      oprot.writeFieldBegin('ID_DOC', TType.STRING, 38)
      oprot.writeString(self.ID_DOC.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_DEPT is not None:
      oprot.writeFieldBegin('ID_DEPT', TType.STRING, 39)
      oprot.writeString(self.ID_DEPT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_DOC_C is not None:
      oprot.writeFieldBegin('ID_DOC_C', TType.STRING, 40)
      oprot.writeString(self.ID_DOC_C.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_DEPT_C is not None:
      oprot.writeFieldBegin('ID_DEPT_C', TType.STRING, 41)
      oprot.writeString(self.ID_DEPT_C.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_LPU_D is not None:
      oprot.writeFieldBegin('ID_LPU_D', TType.I32, 42)
      oprot.writeI32(self.ID_LPU_D)
      oprot.writeFieldEnd()
    if self.IS_CRIM is not None:
      oprot.writeFieldBegin('IS_CRIM', TType.BOOL, 43)
      oprot.writeBool(self.IS_CRIM)
      oprot.writeFieldEnd()
    if self.IDSERVDATA is not None:
      oprot.writeFieldBegin('IDSERVDATA', TType.I32, 44)
      oprot.writeI32(self.IDSERVDATA)
      oprot.writeFieldEnd()
    if self.IDSERVMADE is not None:
      oprot.writeFieldBegin('IDSERVMADE', TType.I32, 45)
      oprot.writeI32(self.IDSERVMADE)
      oprot.writeFieldEnd()
    if self.IDSERVLPU is not None:
      oprot.writeFieldBegin('IDSERVLPU', TType.I32, 46)
      oprot.writeI32(self.IDSERVLPU)
      oprot.writeFieldEnd()
    if self.ID_GOAL is not None:
      oprot.writeFieldBegin('ID_GOAL', TType.I32, 47)
      oprot.writeI32(self.ID_GOAL)
      oprot.writeFieldEnd()
    if self.ID_GOAL_C is not None:
      oprot.writeFieldBegin('ID_GOAL_C', TType.I32, 48)
      oprot.writeI32(self.ID_GOAL_C)
      oprot.writeFieldEnd()
    if self.ID_PAT_CAT is not None:
      oprot.writeFieldBegin('ID_PAT_CAT', TType.I32, 49)
      oprot.writeI32(self.ID_PAT_CAT)
      oprot.writeFieldEnd()
    if self.ID_GOSP is not None:
      oprot.writeFieldBegin('ID_GOSP', TType.I32, 50)
      oprot.writeI32(self.ID_GOSP)
      oprot.writeFieldEnd()
    if self.IDVIDVME is not None:
      oprot.writeFieldBegin('IDVIDVME', TType.I32, 51)
      oprot.writeI32(self.IDVIDVME)
      oprot.writeFieldEnd()
    if self.IDFORPOM is not None:
      oprot.writeFieldBegin('IDFORPOM', TType.I32, 52)
      oprot.writeI32(self.IDFORPOM)
      oprot.writeFieldEnd()
    if self.ID_PRVS_D is not None:
      oprot.writeFieldBegin('ID_PRVS_D', TType.I32, 53)
      oprot.writeI32(self.ID_PRVS_D)
      oprot.writeFieldEnd()
    if self.ID_GOAL_D is not None:
      oprot.writeFieldBegin('ID_GOAL_D', TType.I32, 54)
      oprot.writeI32(self.ID_GOAL_D)
      oprot.writeFieldEnd()
    if self.IDMETHMP is not None:
      oprot.writeFieldBegin('IDMETHMP', TType.I32, 55)
      oprot.writeI32(self.IDMETHMP)
      oprot.writeFieldEnd()
    if self.ID_LPU is not None:
      oprot.writeFieldBegin('ID_LPU', TType.I32, 56)
      oprot.writeI32(self.ID_LPU)
      oprot.writeFieldEnd()
    if self.N_BORN is not None:
      oprot.writeFieldBegin('N_BORN', TType.I16, 57)
      oprot.writeI16(self.N_BORN)
      oprot.writeFieldEnd()
    if self.IS_STAGE is not None:
      oprot.writeFieldBegin('IS_STAGE', TType.BOOL, 58)
      oprot.writeBool(self.IS_STAGE)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.SURNAME is None:
      raise TProtocol.TProtocolException(message='Required field SURNAME is unset!')
    if self.NAME1 is None:
      raise TProtocol.TProtocolException(message='Required field NAME1 is unset!')
    if self.BIRTHDAY is None:
      raise TProtocol.TProtocolException(message='Required field BIRTHDAY is unset!')
    if self.SEX is None:
      raise TProtocol.TProtocolException(message='Required field SEX is unset!')
    if self.ORDER is None:
      raise TProtocol.TProtocolException(message='Required field ORDER is unset!')
    if self.POLIS_S is None:
      raise TProtocol.TProtocolException(message='Required field POLIS_S is unset!')
    if self.POLIS_N is None:
      raise TProtocol.TProtocolException(message='Required field POLIS_N is unset!')
    if self.PROFILE is None:
      raise TProtocol.TProtocolException(message='Required field PROFILE is unset!')
    if self.PROFILENET is None:
      raise TProtocol.TProtocolException(message='Required field PROFILENET is unset!')
    if self.DATEIN is None:
      raise TProtocol.TProtocolException(message='Required field DATEIN is unset!')
    if self.DATEOUT is None:
      raise TProtocol.TProtocolException(message='Required field DATEOUT is unset!')
    if self.AMOUNT is None:
      raise TProtocol.TProtocolException(message='Required field AMOUNT is unset!')
    if self.DIAGNOSIS is None:
      raise TProtocol.TProtocolException(message='Required field DIAGNOSIS is unset!')
    if self.SEND is None:
      raise TProtocol.TProtocolException(message='Required field SEND is unset!')
    if self.SERV_ID is None:
      raise TProtocol.TProtocolException(message='Required field SERV_ID is unset!')
    if self.ID_PRVS is None:
      raise TProtocol.TProtocolException(message='Required field ID_PRVS is unset!')
    if self.ID_EXITUS is None:
      raise TProtocol.TProtocolException(message='Required field ID_EXITUS is unset!')
    if self.ILLHISTORY is None:
      raise TProtocol.TProtocolException(message='Required field ILLHISTORY is unset!')
    if self.CASE_CAST is None:
      raise TProtocol.TProtocolException(message='Required field CASE_CAST is unset!')
    if self.AMOUNT_D is None:
      raise TProtocol.TProtocolException(message='Required field AMOUNT_D is unset!')
    if self.ID_PRMP is None:
      raise TProtocol.TProtocolException(message='Required field ID_PRMP is unset!')
    if self.ID_PRMP_C is None:
      raise TProtocol.TProtocolException(message='Required field ID_PRMP_C is unset!')
    if self.DIAG_C is None:
      raise TProtocol.TProtocolException(message='Required field DIAG_C is unset!')
    if self.DIAG_P_C is None:
      raise TProtocol.TProtocolException(message='Required field DIAG_P_C is unset!')
    if self.QRESULT is None:
      raise TProtocol.TProtocolException(message='Required field QRESULT is unset!')
    if self.ID_PRVS_C is None:
      raise TProtocol.TProtocolException(message='Required field ID_PRVS_C is unset!')
    if self.ID_VMP is None:
      raise TProtocol.TProtocolException(message='Required field ID_VMP is unset!')
    if self.ID_DOC is None:
      raise TProtocol.TProtocolException(message='Required field ID_DOC is unset!')
    if self.ID_DEPT is None:
      raise TProtocol.TProtocolException(message='Required field ID_DEPT is unset!')
    if self.ID_DOC_C is None:
      raise TProtocol.TProtocolException(message='Required field ID_DOC_C is unset!')
    if self.ID_DEPT_C is None:
      raise TProtocol.TProtocolException(message='Required field ID_DEPT_C is unset!')
    if self.IDFORPOM is None:
      raise TProtocol.TProtocolException(message='Required field IDFORPOM is unset!')
    if self.ID_LPU is None:
      raise TProtocol.TProtocolException(message='Required field ID_LPU is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PatientAddress(object):
  """
  Attributes:
   - ADDR_TPYE
   - IDOKATOREG
   - IDOBLTOWN
   - ID_PREFIX
   - ID_HOUSE
   - HOUSE
   - KORPUS
   - FLAT
   - U_ADDRESS
   - KLADR_CODE
   - STREET
   - IDSTREETTYPE
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ADDR_TPYE', None, None, ), # 1
    (2, TType.STRING, 'IDOKATOREG', None, None, ), # 2
    (3, TType.I32, 'IDOBLTOWN', None, None, ), # 3
    (4, TType.I32, 'ID_PREFIX', None, None, ), # 4
    (5, TType.STRING, 'ID_HOUSE', None, None, ), # 5
    (6, TType.STRING, 'HOUSE', None, None, ), # 6
    (7, TType.STRING, 'KORPUS', None, None, ), # 7
    (8, TType.STRING, 'FLAT', None, None, ), # 8
    (9, TType.STRING, 'U_ADDRESS', None, None, ), # 9
    (10, TType.STRING, 'KLADR_CODE', None, None, ), # 10
    (11, TType.STRING, 'STREET', None, None, ), # 11
    (12, TType.STRING, 'IDSTREETTYPE', None, None, ), # 12
  )

  def __init__(self, ADDR_TPYE=None, IDOKATOREG=None, IDOBLTOWN=None, ID_PREFIX=None, ID_HOUSE=None, HOUSE=None, KORPUS=None, FLAT=None, U_ADDRESS=None, KLADR_CODE=None, STREET=None, IDSTREETTYPE=None,):
    self.ADDR_TPYE = ADDR_TPYE
    self.IDOKATOREG = IDOKATOREG
    self.IDOBLTOWN = IDOBLTOWN
    self.ID_PREFIX = ID_PREFIX
    self.ID_HOUSE = ID_HOUSE
    self.HOUSE = HOUSE
    self.KORPUS = KORPUS
    self.FLAT = FLAT
    self.U_ADDRESS = U_ADDRESS
    self.KLADR_CODE = KLADR_CODE
    self.STREET = STREET
    self.IDSTREETTYPE = IDSTREETTYPE

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ADDR_TPYE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.IDOKATOREG = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.IDOBLTOWN = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.ID_PREFIX = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ID_HOUSE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.HOUSE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.KORPUS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.FLAT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.U_ADDRESS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.KLADR_CODE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.STREET = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.IDSTREETTYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PatientAddress')
    if self.ADDR_TPYE is not None:
      oprot.writeFieldBegin('ADDR_TPYE', TType.STRING, 1)
      oprot.writeString(self.ADDR_TPYE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IDOKATOREG is not None:
      oprot.writeFieldBegin('IDOKATOREG', TType.STRING, 2)
      oprot.writeString(self.IDOKATOREG.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IDOBLTOWN is not None:
      oprot.writeFieldBegin('IDOBLTOWN', TType.I32, 3)
      oprot.writeI32(self.IDOBLTOWN)
      oprot.writeFieldEnd()
    if self.ID_PREFIX is not None:
      oprot.writeFieldBegin('ID_PREFIX', TType.I32, 4)
      oprot.writeI32(self.ID_PREFIX)
      oprot.writeFieldEnd()
    if self.ID_HOUSE is not None:
      oprot.writeFieldBegin('ID_HOUSE', TType.STRING, 5)
      oprot.writeString(self.ID_HOUSE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.HOUSE is not None:
      oprot.writeFieldBegin('HOUSE', TType.STRING, 6)
      oprot.writeString(self.HOUSE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KORPUS is not None:
      oprot.writeFieldBegin('KORPUS', TType.STRING, 7)
      oprot.writeString(self.KORPUS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.FLAT is not None:
      oprot.writeFieldBegin('FLAT', TType.STRING, 8)
      oprot.writeString(self.FLAT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.U_ADDRESS is not None:
      oprot.writeFieldBegin('U_ADDRESS', TType.STRING, 9)
      oprot.writeString(self.U_ADDRESS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KLADR_CODE is not None:
      oprot.writeFieldBegin('KLADR_CODE', TType.STRING, 10)
      oprot.writeString(self.KLADR_CODE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.STREET is not None:
      oprot.writeFieldBegin('STREET', TType.STRING, 11)
      oprot.writeString(self.STREET.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IDSTREETTYPE is not None:
      oprot.writeFieldBegin('IDSTREETTYPE', TType.STRING, 12)
      oprot.writeString(self.IDSTREETTYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ADDR_TPYE is None:
      raise TProtocol.TProtocolException(message='Required field ADDR_TPYE is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Spokesman(object):
  """
  Attributes:
   - ID_TYPE
   - SURNAME
   - NAME
   - S_NAME
   - BIRTHDAY
   - SEX
   - DOC_TYPE
   - SER_L
   - SER_R
   - DOC_NUM
   - B_PLACE
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ID_TYPE', None, None, ), # 1
    (2, TType.STRING, 'SURNAME', None, None, ), # 2
    (3, TType.STRING, 'NAME', None, None, ), # 3
    (4, TType.STRING, 'S_NAME', None, None, ), # 4
    (5, TType.I64, 'BIRTHDAY', None, None, ), # 5
    (6, TType.I16, 'SEX', None, None, ), # 6
    (7, TType.STRING, 'DOC_TYPE', None, None, ), # 7
    (8, TType.STRING, 'SER_L', None, None, ), # 8
    (9, TType.STRING, 'SER_R', None, None, ), # 9
    (10, TType.STRING, 'DOC_NUM', None, None, ), # 10
    (11, TType.STRING, 'B_PLACE', None, None, ), # 11
  )

  def __init__(self, ID_TYPE=None, SURNAME=None, NAME=None, S_NAME=None, BIRTHDAY=None, SEX=None, DOC_TYPE=None, SER_L=None, SER_R=None, DOC_NUM=None, B_PLACE=None,):
    self.ID_TYPE = ID_TYPE
    self.SURNAME = SURNAME
    self.NAME = NAME
    self.S_NAME = S_NAME
    self.BIRTHDAY = BIRTHDAY
    self.SEX = SEX
    self.DOC_TYPE = DOC_TYPE
    self.SER_L = SER_L
    self.SER_R = SER_R
    self.DOC_NUM = DOC_NUM
    self.B_PLACE = B_PLACE

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ID_TYPE = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.SURNAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.NAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.S_NAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.BIRTHDAY = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.SEX = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.DOC_TYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.SER_L = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.SER_R = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.DOC_NUM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.B_PLACE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Spokesman')
    if self.ID_TYPE is not None:
      oprot.writeFieldBegin('ID_TYPE', TType.I32, 1)
      oprot.writeI32(self.ID_TYPE)
      oprot.writeFieldEnd()
    if self.SURNAME is not None:
      oprot.writeFieldBegin('SURNAME', TType.STRING, 2)
      oprot.writeString(self.SURNAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NAME is not None:
      oprot.writeFieldBegin('NAME', TType.STRING, 3)
      oprot.writeString(self.NAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.S_NAME is not None:
      oprot.writeFieldBegin('S_NAME', TType.STRING, 4)
      oprot.writeString(self.S_NAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.BIRTHDAY is not None:
      oprot.writeFieldBegin('BIRTHDAY', TType.I64, 5)
      oprot.writeI64(self.BIRTHDAY)
      oprot.writeFieldEnd()
    if self.SEX is not None:
      oprot.writeFieldBegin('SEX', TType.I16, 6)
      oprot.writeI16(self.SEX)
      oprot.writeFieldEnd()
    if self.DOC_TYPE is not None:
      oprot.writeFieldBegin('DOC_TYPE', TType.STRING, 7)
      oprot.writeString(self.DOC_TYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER_L is not None:
      oprot.writeFieldBegin('SER_L', TType.STRING, 8)
      oprot.writeString(self.SER_L.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER_R is not None:
      oprot.writeFieldBegin('SER_R', TType.STRING, 9)
      oprot.writeString(self.SER_R.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOC_NUM is not None:
      oprot.writeFieldBegin('DOC_NUM', TType.STRING, 10)
      oprot.writeString(self.DOC_NUM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.B_PLACE is not None:
      oprot.writeFieldBegin('B_PLACE', TType.STRING, 11)
      oprot.writeString(self.B_PLACE.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ID_TYPE is None:
      raise TProtocol.TProtocolException(message='Required field ID_TYPE is unset!')
    if self.SURNAME is None:
      raise TProtocol.TProtocolException(message='Required field SURNAME is unset!')
    if self.NAME is None:
      raise TProtocol.TProtocolException(message='Required field NAME is unset!')
    if self.S_NAME is None:
      raise TProtocol.TProtocolException(message='Required field S_NAME is unset!')
    if self.BIRTHDAY is None:
      raise TProtocol.TProtocolException(message='Required field BIRTHDAY is unset!')
    if self.SEX is None:
      raise TProtocol.TProtocolException(message='Required field SEX is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PatientEntry(object):
  """
  Attributes:
   - ID_PATIENT
   - SURNAME
   - NAME
   - S_NAME
   - BIRTHDAY
   - SEX
   - ID_PAT_CAT
   - DOC_TYPE
   - SER_L
   - SER_R
   - DOC_Numeric
   - SNILS
   - C_OKSM
   - IS_SMP
   - POLIS_TYPE
   - POLIS_S
   - POLIS_N
   - ID_SMO
   - POLIS_BD
   - POLIS_ED
   - ID_SMO_REG
   - registrationAddress
   - livingAddress
   - PLACE_WORK
   - ADDR_WORK
   - ADDR_PLACE
   - REMARK
   - B_PLACE
   - VNOV_D
   - spokesman
   - SEND
   - ERROR
   - ID_MIS
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ID_PATIENT', None, None, ), # 1
    (2, TType.STRING, 'SURNAME', None, None, ), # 2
    (3, TType.STRING, 'NAME', None, None, ), # 3
    (4, TType.STRING, 'S_NAME', None, None, ), # 4
    (5, TType.I64, 'BIRTHDAY', None, None, ), # 5
    (6, TType.I16, 'SEX', None, None, ), # 6
    (7, TType.I16, 'ID_PAT_CAT', None, None, ), # 7
    (8, TType.STRING, 'DOC_TYPE', None, None, ), # 8
    (9, TType.STRING, 'SER_L', None, None, ), # 9
    (10, TType.STRING, 'SER_R', None, None, ), # 10
    (11, TType.STRING, 'DOC_Numeric', None, None, ), # 11
    (12, TType.STRING, 'SNILS', None, None, ), # 12
    (13, TType.STRING, 'C_OKSM', None, None, ), # 13
    (14, TType.BOOL, 'IS_SMP', None, None, ), # 14
    (15, TType.STRING, 'POLIS_TYPE', None, None, ), # 15
    (16, TType.STRING, 'POLIS_S', None, None, ), # 16
    (17, TType.STRING, 'POLIS_N', None, None, ), # 17
    (18, TType.STRING, 'ID_SMO', None, None, ), # 18
    (19, TType.I64, 'POLIS_BD', None, None, ), # 19
    (20, TType.I64, 'POLIS_ED', None, None, ), # 20
    (21, TType.STRING, 'ID_SMO_REG', None, None, ), # 21
    (22, TType.STRUCT, 'registrationAddress', (PatientAddress, PatientAddress.thrift_spec), None, ), # 22
    (23, TType.STRUCT, 'livingAddress', (PatientAddress, PatientAddress.thrift_spec), None, ), # 23
    (24, TType.STRING, 'PLACE_WORK', None, None, ), # 24
    (25, TType.STRING, 'ADDR_WORK', None, None, ), # 25
    (26, TType.STRING, 'ADDR_PLACE', None, None, ), # 26
    (27, TType.STRING, 'REMARK', None, None, ), # 27
    (28, TType.STRING, 'B_PLACE', None, None, ), # 28
    (29, TType.I32, 'VNOV_D', None, None, ), # 29
    (30, TType.STRUCT, 'spokesman', (Spokesman, Spokesman.thrift_spec), None, ), # 30
    (31, TType.BOOL, 'SEND', None, None, ), # 31
    (32, TType.STRING, 'ERROR', None, None, ), # 32
    (33, TType.STRING, 'ID_MIS', None, None, ), # 33
  )

  def __init__(self, ID_PATIENT=None, SURNAME=None, NAME=None, S_NAME=None, BIRTHDAY=None, SEX=None, ID_PAT_CAT=None, DOC_TYPE=None, SER_L=None, SER_R=None, DOC_Numeric=None, SNILS=None, C_OKSM=None, IS_SMP=None, POLIS_TYPE=None, POLIS_S=None, POLIS_N=None, ID_SMO=None, POLIS_BD=None, POLIS_ED=None, ID_SMO_REG=None, registrationAddress=None, livingAddress=None, PLACE_WORK=None, ADDR_WORK=None, ADDR_PLACE=None, REMARK=None, B_PLACE=None, VNOV_D=None, spokesman=None, SEND=None, ERROR=None, ID_MIS=None,):
    self.ID_PATIENT = ID_PATIENT
    self.SURNAME = SURNAME
    self.NAME = NAME
    self.S_NAME = S_NAME
    self.BIRTHDAY = BIRTHDAY
    self.SEX = SEX
    self.ID_PAT_CAT = ID_PAT_CAT
    self.DOC_TYPE = DOC_TYPE
    self.SER_L = SER_L
    self.SER_R = SER_R
    self.DOC_Numeric = DOC_Numeric
    self.SNILS = SNILS
    self.C_OKSM = C_OKSM
    self.IS_SMP = IS_SMP
    self.POLIS_TYPE = POLIS_TYPE
    self.POLIS_S = POLIS_S
    self.POLIS_N = POLIS_N
    self.ID_SMO = ID_SMO
    self.POLIS_BD = POLIS_BD
    self.POLIS_ED = POLIS_ED
    self.ID_SMO_REG = ID_SMO_REG
    self.registrationAddress = registrationAddress
    self.livingAddress = livingAddress
    self.PLACE_WORK = PLACE_WORK
    self.ADDR_WORK = ADDR_WORK
    self.ADDR_PLACE = ADDR_PLACE
    self.REMARK = REMARK
    self.B_PLACE = B_PLACE
    self.VNOV_D = VNOV_D
    self.spokesman = spokesman
    self.SEND = SEND
    self.ERROR = ERROR
    self.ID_MIS = ID_MIS

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ID_PATIENT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.SURNAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.NAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.S_NAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.BIRTHDAY = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.SEX = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.ID_PAT_CAT = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.DOC_TYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.SER_L = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.SER_R = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.DOC_Numeric = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.SNILS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.C_OKSM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.IS_SMP = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.POLIS_TYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.POLIS_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.POLIS_N = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.ID_SMO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.POLIS_BD = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.POLIS_ED = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.ID_SMO_REG = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.registrationAddress = PatientAddress()
          self.registrationAddress.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRUCT:
          self.livingAddress = PatientAddress()
          self.livingAddress.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.PLACE_WORK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.ADDR_WORK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.ADDR_PLACE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.REMARK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.B_PLACE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.VNOV_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.spokesman = Spokesman()
          self.spokesman.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.SEND = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.ERROR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.ID_MIS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PatientEntry')
    if self.ID_PATIENT is not None:
      oprot.writeFieldBegin('ID_PATIENT', TType.STRING, 1)
      oprot.writeString(self.ID_PATIENT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SURNAME is not None:
      oprot.writeFieldBegin('SURNAME', TType.STRING, 2)
      oprot.writeString(self.SURNAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NAME is not None:
      oprot.writeFieldBegin('NAME', TType.STRING, 3)
      oprot.writeString(self.NAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.S_NAME is not None:
      oprot.writeFieldBegin('S_NAME', TType.STRING, 4)
      oprot.writeString(self.S_NAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.BIRTHDAY is not None:
      oprot.writeFieldBegin('BIRTHDAY', TType.I64, 5)
      oprot.writeI64(self.BIRTHDAY)
      oprot.writeFieldEnd()
    if self.SEX is not None:
      oprot.writeFieldBegin('SEX', TType.I16, 6)
      oprot.writeI16(self.SEX)
      oprot.writeFieldEnd()
    if self.ID_PAT_CAT is not None:
      oprot.writeFieldBegin('ID_PAT_CAT', TType.I16, 7)
      oprot.writeI16(self.ID_PAT_CAT)
      oprot.writeFieldEnd()
    if self.DOC_TYPE is not None:
      oprot.writeFieldBegin('DOC_TYPE', TType.STRING, 8)
      oprot.writeString(self.DOC_TYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER_L is not None:
      oprot.writeFieldBegin('SER_L', TType.STRING, 9)
      oprot.writeString(self.SER_L.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SER_R is not None:
      oprot.writeFieldBegin('SER_R', TType.STRING, 10)
      oprot.writeString(self.SER_R.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOC_Numeric is not None:
      oprot.writeFieldBegin('DOC_Numeric', TType.STRING, 11)
      oprot.writeString(self.DOC_Numeric.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SNILS is not None:
      oprot.writeFieldBegin('SNILS', TType.STRING, 12)
      oprot.writeString(self.SNILS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.C_OKSM is not None:
      oprot.writeFieldBegin('C_OKSM', TType.STRING, 13)
      oprot.writeString(self.C_OKSM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IS_SMP is not None:
      oprot.writeFieldBegin('IS_SMP', TType.BOOL, 14)
      oprot.writeBool(self.IS_SMP)
      oprot.writeFieldEnd()
    if self.POLIS_TYPE is not None:
      oprot.writeFieldBegin('POLIS_TYPE', TType.STRING, 15)
      oprot.writeString(self.POLIS_TYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POLIS_S is not None:
      oprot.writeFieldBegin('POLIS_S', TType.STRING, 16)
      oprot.writeString(self.POLIS_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POLIS_N is not None:
      oprot.writeFieldBegin('POLIS_N', TType.STRING, 17)
      oprot.writeString(self.POLIS_N.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_SMO is not None:
      oprot.writeFieldBegin('ID_SMO', TType.STRING, 18)
      oprot.writeString(self.ID_SMO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POLIS_BD is not None:
      oprot.writeFieldBegin('POLIS_BD', TType.I64, 19)
      oprot.writeI64(self.POLIS_BD)
      oprot.writeFieldEnd()
    if self.POLIS_ED is not None:
      oprot.writeFieldBegin('POLIS_ED', TType.I64, 20)
      oprot.writeI64(self.POLIS_ED)
      oprot.writeFieldEnd()
    if self.ID_SMO_REG is not None:
      oprot.writeFieldBegin('ID_SMO_REG', TType.STRING, 21)
      oprot.writeString(self.ID_SMO_REG.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.registrationAddress is not None:
      oprot.writeFieldBegin('registrationAddress', TType.STRUCT, 22)
      self.registrationAddress.write(oprot)
      oprot.writeFieldEnd()
    if self.livingAddress is not None:
      oprot.writeFieldBegin('livingAddress', TType.STRUCT, 23)
      self.livingAddress.write(oprot)
      oprot.writeFieldEnd()
    if self.PLACE_WORK is not None:
      oprot.writeFieldBegin('PLACE_WORK', TType.STRING, 24)
      oprot.writeString(self.PLACE_WORK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ADDR_WORK is not None:
      oprot.writeFieldBegin('ADDR_WORK', TType.STRING, 25)
      oprot.writeString(self.ADDR_WORK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ADDR_PLACE is not None:
      oprot.writeFieldBegin('ADDR_PLACE', TType.STRING, 26)
      oprot.writeString(self.ADDR_PLACE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.REMARK is not None:
      oprot.writeFieldBegin('REMARK', TType.STRING, 27)
      oprot.writeString(self.REMARK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.B_PLACE is not None:
      oprot.writeFieldBegin('B_PLACE', TType.STRING, 28)
      oprot.writeString(self.B_PLACE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.VNOV_D is not None:
      oprot.writeFieldBegin('VNOV_D', TType.I32, 29)
      oprot.writeI32(self.VNOV_D)
      oprot.writeFieldEnd()
    if self.spokesman is not None:
      oprot.writeFieldBegin('spokesman', TType.STRUCT, 30)
      self.spokesman.write(oprot)
      oprot.writeFieldEnd()
    if self.SEND is not None:
      oprot.writeFieldBegin('SEND', TType.BOOL, 31)
      oprot.writeBool(self.SEND)
      oprot.writeFieldEnd()
    if self.ERROR is not None:
      oprot.writeFieldBegin('ERROR', TType.STRING, 32)
      oprot.writeString(self.ERROR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.ID_MIS is not None:
      oprot.writeFieldBegin('ID_MIS', TType.STRING, 33)
      oprot.writeString(self.ID_MIS.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ID_PATIENT is None:
      raise TProtocol.TProtocolException(message='Required field ID_PATIENT is unset!')
    if self.SURNAME is None:
      raise TProtocol.TProtocolException(message='Required field SURNAME is unset!')
    if self.NAME is None:
      raise TProtocol.TProtocolException(message='Required field NAME is unset!')
    if self.S_NAME is None:
      raise TProtocol.TProtocolException(message='Required field S_NAME is unset!')
    if self.BIRTHDAY is None:
      raise TProtocol.TProtocolException(message='Required field BIRTHDAY is unset!')
    if self.SEX is None:
      raise TProtocol.TProtocolException(message='Required field SEX is unset!')
    if self.ID_PAT_CAT is None:
      raise TProtocol.TProtocolException(message='Required field ID_PAT_CAT is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Registry(object):
  """
  Attributes:
   - serviceRegistry
   - patientRegistry
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'serviceRegistry', (TType.STRUCT,(ServiceEntry, ServiceEntry.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'patientRegistry', (TType.STRUCT,(PatientEntry, PatientEntry.thrift_spec)), None, ), # 2
  )

  def __init__(self, serviceRegistry=None, patientRegistry=None,):
    self.serviceRegistry = serviceRegistry
    self.patientRegistry = patientRegistry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.serviceRegistry = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ServiceEntry()
            _elem5.read(iprot)
            self.serviceRegistry.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.patientRegistry = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = PatientEntry()
            _elem11.read(iprot)
            self.patientRegistry.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Registry')
    if self.serviceRegistry is not None:
      oprot.writeFieldBegin('serviceRegistry', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.serviceRegistry))
      for iter12 in self.serviceRegistry:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.patientRegistry is not None:
      oprot.writeFieldBegin('patientRegistry', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.patientRegistry))
      for iter13 in self.patientRegistry:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidDateIntervalException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidDateIntervalException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
